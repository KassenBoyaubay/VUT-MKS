
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004088  08004088  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004090  08004090  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000c8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6a0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7c  00000000  00000000  0002d744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024226  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d951  00000000  00000000  00054cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db75c  00000000  00000000  0006262f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013dd8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bdc  00000000  00000000  0013dddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003f48 	.word	0x08003f48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08003f48 	.word	0x08003f48

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffd1 	bl	8000594 <ITM_SendChar>
	return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	 { 1, 2, 3, 21 },
	 { 4, 5, 6, 22 },
	 { 7, 8, 9, 23 },
	 { 11, 0, 12, 24 },
 };
 if (key == -1) {
 8000604:	4b4b      	ldr	r3, [pc, #300]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060e:	d142      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x9a>
	 if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET) key = keyboard[row][0];
 8000610:	2108      	movs	r1, #8
 8000612:	4849      	ldr	r0, [pc, #292]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000614:	f001 f854 	bl	80016c0 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d108      	bne.n	8000630 <HAL_TIM_PeriodElapsedCallback+0x34>
 800061e:	4b47      	ldr	r3, [pc, #284]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a47      	ldr	r2, [pc, #284]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4413      	add	r3, r2
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	b25a      	sxtb	r2, r3
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800062e:	701a      	strb	r2, [r3, #0]
	 if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET) key = keyboard[row][1];
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4841      	ldr	r0, [pc, #260]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000634:	f001 f844 	bl	80016c0 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d109      	bne.n	8000652 <HAL_TIM_PeriodElapsedCallback+0x56>
 800063e:	4b3f      	ldr	r3, [pc, #252]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a3f      	ldr	r2, [pc, #252]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	4413      	add	r3, r2
 8000648:	3304      	adds	r3, #4
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	b25a      	sxtb	r2, r3
 800064e:	4b39      	ldr	r3, [pc, #228]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000650:	701a      	strb	r2, [r3, #0]
	 if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET) key = keyboard[row][2];
 8000652:	2120      	movs	r1, #32
 8000654:	4838      	ldr	r0, [pc, #224]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000656:	f001 f833 	bl	80016c0 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d109      	bne.n	8000674 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000660:	4b36      	ldr	r3, [pc, #216]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a36      	ldr	r2, [pc, #216]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000666:	011b      	lsls	r3, r3, #4
 8000668:	4413      	add	r3, r2
 800066a:	3308      	adds	r3, #8
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b25a      	sxtb	r2, r3
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000672:	701a      	strb	r2, [r3, #0]
	 if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET) key = keyboard[row][3];
 8000674:	2110      	movs	r1, #16
 8000676:	4830      	ldr	r0, [pc, #192]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000678:	f001 f822 	bl	80016c0 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	4413      	add	r3, r2
 800068c:	330c      	adds	r3, #12
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	b25a      	sxtb	r2, r3
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000694:	701a      	strb	r2, [r3, #0]
 }
 HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2102      	movs	r1, #2
 800069a:	482a      	ldr	r0, [pc, #168]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800069c:	f001 f828 	bl	80016f0 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	4828      	ldr	r0, [pc, #160]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006a8:	f001 f822 	bl	80016f0 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	4825      	ldr	r0, [pc, #148]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006b2:	f001 f81d 	bl	80016f0 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4822      	ldr	r0, [pc, #136]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006be:	f001 f817 	bl	80016f0 <HAL_GPIO_WritePin>
 switch (row) {
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d830      	bhi.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e1 	.word	0x080006e1
 80006d4:	080006f5 	.word	0x080006f5
 80006d8:	08000707 	.word	0x08000707
 80006dc:	0800071b 	.word	0x0800071b
	 case 0: row = 1; HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET); break;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ec:	4816      	ldr	r0, [pc, #88]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006ee:	f000 ffff 	bl	80016f0 <HAL_GPIO_WritePin>
 80006f2:	e01b      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
	 case 1: row = 2; HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET); break;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	2200      	movs	r2, #0
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000700:	f000 fff6 	bl	80016f0 <HAL_GPIO_WritePin>
 8000704:	e012      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
	 case 2: row = 3; HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET); break;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000708:	2203      	movs	r2, #3
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000714:	f000 ffec 	bl	80016f0 <HAL_GPIO_WritePin>
 8000718:	e008      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
	 case 3: row = 0; HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET); break;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000726:	f000 ffe3 	bl	80016f0 <HAL_GPIO_WritePin>
 800072a:	bf00      	nop
 }
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	40021000 	.word	0x40021000
 800073c:	2000011c 	.word	0x2000011c
 8000740:	08003f84 	.word	0x08003f84
 8000744:	40021800 	.word	0x40021800
 8000748:	40021400 	.word	0x40021400

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fc61 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f86d 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f000 f94d 	bl	80009f8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800075e:	f000 f921 	bl	80009a4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000762:	f000 f8d1 	bl	8000908 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000766:	482c      	ldr	r0, [pc, #176]	; (8000818 <main+0xcc>)
 8000768:	f001 fcc4 	bl	80020f4 <HAL_TIM_Base_Start_IT>
  printf("Start\n");
 800076c:	482b      	ldr	r0, [pc, #172]	; (800081c <main+0xd0>)
 800076e:	f002 fc6d 	bl	800304c <puts>

  static const int kod[5] = {7, 9, 3, 2, 12};
  int8_t pozice = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
//	  HAL_Delay(250);

	  static uint32_t delay = 0;

	  if (key != -1) {
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <main+0xd4>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d030      	beq.n	80007e4 <main+0x98>
		  printf("stisknuto: %d, pozice: %d\n", key, pozice);
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <main+0xd4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b25b      	sxtb	r3, r3
 8000788:	4619      	mov	r1, r3
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	461a      	mov	r2, r3
 8000790:	4824      	ldr	r0, [pc, #144]	; (8000824 <main+0xd8>)
 8000792:	f002 fbd5 	bl	8002f40 <iprintf>
		  if (key == kod[pozice]) {
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <main+0xd4>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	4a21      	ldr	r2, [pc, #132]	; (8000828 <main+0xdc>)
 80007a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a8:	4299      	cmp	r1, r3
 80007aa:	d116      	bne.n	80007da <main+0x8e>
			  pozice++;
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	3301      	adds	r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	71fb      	strb	r3, [r7, #7]
			  delay = HAL_GetTick();
 80007b8:	f000 fc94 	bl	80010e4 <HAL_GetTick>
 80007bc:	4603      	mov	r3, r0
 80007be:	4a1b      	ldr	r2, [pc, #108]	; (800082c <main+0xe0>)
 80007c0:	6013      	str	r3, [r2, #0]
			  if (pozice == sizeof(kod)/sizeof(kod[0])) {
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b05      	cmp	r3, #5
 80007c8:	d109      	bne.n	80007de <main+0x92>
				  pozice = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	71fb      	strb	r3, [r7, #7]
				  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2101      	movs	r1, #1
 80007d2:	4817      	ldr	r0, [pc, #92]	; (8000830 <main+0xe4>)
 80007d4:	f000 ff8c 	bl	80016f0 <HAL_GPIO_WritePin>
 80007d8:	e001      	b.n	80007de <main+0x92>
			  }
		  } else {
			  pozice = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	71fb      	strb	r3, [r7, #7]
		  }
		  key = -1;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <main+0xd4>)
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	701a      	strb	r2, [r3, #0]
	  }

	  if (HAL_GetTick() > delay + TIMEOUT) {
 80007e4:	f000 fc7e 	bl	80010e4 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <main+0xe0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d90b      	bls.n	800080e <main+0xc2>
		  delay = HAL_GetTick();
 80007f6:	f000 fc75 	bl	80010e4 <HAL_GetTick>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a0b      	ldr	r2, [pc, #44]	; (800082c <main+0xe0>)
 80007fe:	6013      	str	r3, [r2, #0]
		  pozice = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	71fb      	strb	r3, [r7, #7]
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <main+0xe4>)
 800080a:	f000 ff71 	bl	80016f0 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(500);
 800080e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000812:	f000 fc73 	bl	80010fc <HAL_Delay>
  {
 8000816:	e7ae      	b.n	8000776 <main+0x2a>
 8000818:	20000090 	.word	0x20000090
 800081c:	08003f60 	.word	0x08003f60
 8000820:	20000000 	.word	0x20000000
 8000824:	08003f68 	.word	0x08003f68
 8000828:	08003fc4 	.word	0x08003fc4
 800082c:	20000120 	.word	0x20000120
 8000830:	40020400 	.word	0x40020400

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	; 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	2230      	movs	r2, #48	; 0x30
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fb74 	bl	8002f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a27      	ldr	r2, [pc, #156]	; (8000900 <SystemClock_Config+0xcc>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40
 8000868:	4b25      	ldr	r3, [pc, #148]	; (8000900 <SystemClock_Config+0xcc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <SystemClock_Config+0xd0>)
 800087e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <SystemClock_Config+0xd0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000894:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008a8:	23a8      	movs	r3, #168	; 0xa8
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b0:	2307      	movs	r3, #7
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 ff33 	bl	8001724 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c4:	f000 f9f6 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2105      	movs	r1, #5
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f994 	bl	8001c14 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008f2:	f000 f9df 	bl	8000cb4 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3750      	adds	r7, #80	; 0x50
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_TIM3_Init+0x94>)
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <MX_TIM3_Init+0x98>)
 8000928:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_TIM3_Init+0x94>)
 800092c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_TIM3_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_TIM3_Init+0x94>)
 800093a:	2263      	movs	r2, #99	; 0x63
 800093c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_TIM3_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_TIM3_Init+0x94>)
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094a:	4814      	ldr	r0, [pc, #80]	; (800099c <MX_TIM3_Init+0x94>)
 800094c:	f001 fb82 	bl	8002054 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f9ad 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM3_Init+0x94>)
 8000968:	f001 fd3c 	bl	80023e4 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 f99f 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_TIM3_Init+0x94>)
 8000984:	f001 ff58 	bl	8002838 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800098e:	f000 f991 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000090 	.word	0x20000090
 80009a0:	40000400 	.word	0x40000400

080009a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <MX_USART3_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009dc:	f001 ffbc 	bl	8002958 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f000 f965 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000d8 	.word	0x200000d8
 80009f4:	40004800 	.word	0x40004800

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	4ba1      	ldr	r3, [pc, #644]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4aa0      	ldr	r2, [pc, #640]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a18:	f043 0310 	orr.w	r3, r3, #16
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b9e      	ldr	r3, [pc, #632]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	623b      	str	r3, [r7, #32]
 8000a28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	4b9a      	ldr	r3, [pc, #616]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a99      	ldr	r2, [pc, #612]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b97      	ldr	r3, [pc, #604]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	61fb      	str	r3, [r7, #28]
 8000a44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	4b93      	ldr	r3, [pc, #588]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a92      	ldr	r2, [pc, #584]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b90      	ldr	r3, [pc, #576]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	4b8c      	ldr	r3, [pc, #560]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a8b      	ldr	r2, [pc, #556]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b89      	ldr	r3, [pc, #548]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b85      	ldr	r3, [pc, #532]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a84      	ldr	r2, [pc, #528]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b82      	ldr	r3, [pc, #520]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b7e      	ldr	r3, [pc, #504]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a7d      	ldr	r2, [pc, #500]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b7b      	ldr	r3, [pc, #492]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b77      	ldr	r3, [pc, #476]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a76      	ldr	r2, [pc, #472]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b74      	ldr	r3, [pc, #464]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b70      	ldr	r3, [pc, #448]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a6f      	ldr	r2, [pc, #444]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b6d      	ldr	r3, [pc, #436]	; (8000c98 <MX_GPIO_Init+0x2a0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000af4:	4869      	ldr	r0, [pc, #420]	; (8000c9c <MX_GPIO_Init+0x2a4>)
 8000af6:	f000 fdfb 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b00:	4867      	ldr	r0, [pc, #412]	; (8000ca0 <MX_GPIO_Init+0x2a8>)
 8000b02:	f000 fdf5 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2142      	movs	r1, #66	; 0x42
 8000b0a:	4866      	ldr	r0, [pc, #408]	; (8000ca4 <MX_GPIO_Init+0x2ac>)
 8000b0c:	f000 fdf0 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
  GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 8000b10:	2378      	movs	r3, #120	; 0x78
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4861      	ldr	r0, [pc, #388]	; (8000ca8 <MX_GPIO_Init+0x2b0>)
 8000b24:	f000 fc20 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	485b      	ldr	r0, [pc, #364]	; (8000cac <MX_GPIO_Init+0x2b4>)
 8000b40:	f000 fc12 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
  GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 8000b44:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b4a:	2311      	movs	r3, #17
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	484f      	ldr	r0, [pc, #316]	; (8000c9c <MX_GPIO_Init+0x2a4>)
 8000b5e:	f000 fc03 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b62:	2332      	movs	r3, #50	; 0x32
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b72:	230b      	movs	r3, #11
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	484b      	ldr	r0, [pc, #300]	; (8000cac <MX_GPIO_Init+0x2b4>)
 8000b7e:	f000 fbf3 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b82:	2386      	movs	r3, #134	; 0x86
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b92:	230b      	movs	r3, #11
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4844      	ldr	r0, [pc, #272]	; (8000cb0 <MX_GPIO_Init+0x2b8>)
 8000b9e:	f000 fbe3 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ba2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4839      	ldr	r0, [pc, #228]	; (8000ca0 <MX_GPIO_Init+0x2a8>)
 8000bbc:	f000 fbd4 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : Row1_Pin */
  GPIO_InitStruct.Pin = Row1_Pin;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bc4:	2311      	movs	r3, #17
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4833      	ldr	r0, [pc, #204]	; (8000ca4 <MX_GPIO_Init+0x2ac>)
 8000bd8:	f000 fbc6 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bee:	230b      	movs	r3, #11
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4829      	ldr	r0, [pc, #164]	; (8000ca0 <MX_GPIO_Init+0x2a8>)
 8000bfa:	f000 fbb5 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <MX_GPIO_Init+0x2ac>)
 8000c16:	f000 fba7 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481d      	ldr	r0, [pc, #116]	; (8000ca4 <MX_GPIO_Init+0x2ac>)
 8000c2e:	f000 fb9b 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c44:	230a      	movs	r3, #10
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <MX_GPIO_Init+0x2b8>)
 8000c50:	f000 fb8a 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <MX_GPIO_Init+0x2b8>)
 8000c6a:	f000 fb7d 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c80:	230b      	movs	r3, #11
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_GPIO_Init+0x2ac>)
 8000c8c:	f000 fb6c 	bl	8001368 <HAL_GPIO_Init>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40021400 	.word	0x40021400
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d115      	bne.n	8000d4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_TIM_Base_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_TIM_Base_MspInit+0x4c>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_TIM_Base_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	201d      	movs	r0, #29
 8000d44:	f000 fad9 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d48:	201d      	movs	r0, #29
 8000d4a:	f000 faf2 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40000400 	.word	0x40000400
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_UART_MspInit+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12c      	bne.n	8000ddc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_UART_MspInit+0x8c>)
 8000dd8:	f000 fac6 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40004800 	.word	0x40004800
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f93e 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM3_IRQHandler+0x10>)
 8000e4a:	f001 f9c3 	bl	80021d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000090 	.word	0x20000090

08000e58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e00a      	b.n	8000e80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	4601      	mov	r1, r0
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	b2ca      	uxtb	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf0      	blt.n	8000e6a <_read+0x12>
	}

return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e009      	b.n	8000eb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb98 	bl	80005e2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf1      	blt.n	8000ea4 <_write+0x12>
	}
	return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_close>:

int _close(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_isatty>:

int _isatty(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	return 1;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f001 ffba 	bl	8002edc <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20030000 	.word	0x20030000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	20000124 	.word	0x20000124
 8000f9c:	20000140 	.word	0x20000140

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	; (8001010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fee:	f7ff ffd7 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f001 ff79 	bl	8002ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fba9 	bl	800074c <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ffc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001008:	08004098 	.word	0x08004098
  ldr r2, =_sbss
 800100c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001010:	2000013c 	.word	0x2000013c

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f94f 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fe38 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f967 	bl	800134e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f92f 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000004 	.word	0x20000004
 80010b4:	2000000c 	.word	0x2000000c
 80010b8:	20000008 	.word	0x20000008

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	20000128 	.word	0x20000128

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000128 	.word	0x20000128

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000000c 	.word	0x2000000c

08001144 <__NVIC_SetPriorityGrouping>:
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e177      	b.n	8001674 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8166 	bne.w	800166e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80c0 	beq.w	800166e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b66      	ldr	r3, [pc, #408]	; (800168c <HAL_GPIO_Init+0x324>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a65      	ldr	r2, [pc, #404]	; (800168c <HAL_GPIO_Init+0x324>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b63      	ldr	r3, [pc, #396]	; (800168c <HAL_GPIO_Init+0x324>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a61      	ldr	r2, [pc, #388]	; (8001690 <HAL_GPIO_Init+0x328>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a58      	ldr	r2, [pc, #352]	; (8001694 <HAL_GPIO_Init+0x32c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d037      	beq.n	80015a6 <HAL_GPIO_Init+0x23e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a57      	ldr	r2, [pc, #348]	; (8001698 <HAL_GPIO_Init+0x330>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d031      	beq.n	80015a2 <HAL_GPIO_Init+0x23a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a56      	ldr	r2, [pc, #344]	; (800169c <HAL_GPIO_Init+0x334>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d02b      	beq.n	800159e <HAL_GPIO_Init+0x236>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a55      	ldr	r2, [pc, #340]	; (80016a0 <HAL_GPIO_Init+0x338>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d025      	beq.n	800159a <HAL_GPIO_Init+0x232>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_GPIO_Init+0x33c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01f      	beq.n	8001596 <HAL_GPIO_Init+0x22e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a53      	ldr	r2, [pc, #332]	; (80016a8 <HAL_GPIO_Init+0x340>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x22a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x344>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x348>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x34c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x350>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x21a>
 800157e:	2309      	movs	r3, #9
 8001580:	e012      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001582:	230a      	movs	r3, #10
 8001584:	e010      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001586:	2308      	movs	r3, #8
 8001588:	e00e      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800158a:	2307      	movs	r3, #7
 800158c:	e00c      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800158e:	2306      	movs	r3, #6
 8001590:	e00a      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001596:	2304      	movs	r3, #4
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 80015a6:	2300      	movs	r3, #0
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	f002 0203 	and.w	r2, r2, #3
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4093      	lsls	r3, r2
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b8:	4935      	ldr	r1, [pc, #212]	; (8001690 <HAL_GPIO_Init+0x328>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_GPIO_Init+0x354>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ea:	4a34      	ldr	r2, [pc, #208]	; (80016bc <HAL_GPIO_Init+0x354>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_GPIO_Init+0x354>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <HAL_GPIO_Init+0x354>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_GPIO_Init+0x354>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_GPIO_Init+0x354>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_GPIO_Init+0x354>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_GPIO_Init+0x354>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	f67f ae84 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40021400 	.word	0x40021400
 80016ac:	40021800 	.word	0x40021800
 80016b0:	40021c00 	.word	0x40021c00
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40022400 	.word	0x40022400
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e001      	b.n	80016e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e267      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d075      	beq.n	800182e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b04      	cmp	r3, #4
 800174c:	d00c      	beq.n	8001768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001756:	2b08      	cmp	r3, #8
 8001758:	d112      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175a:	4b82      	ldr	r3, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001766:	d10b      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	4b7e      	ldr	r3, [pc, #504]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d05b      	beq.n	800182c <HAL_RCC_OscConfig+0x108>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d157      	bne.n	800182c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e242      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d106      	bne.n	8001798 <HAL_RCC_OscConfig+0x74>
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a75      	ldr	r2, [pc, #468]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e01d      	b.n	80017d4 <HAL_RCC_OscConfig+0xb0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x98>
 80017a2:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6f      	ldr	r2, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6d      	ldr	r3, [pc, #436]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6c      	ldr	r2, [pc, #432]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0xb0>
 80017bc:	4b69      	ldr	r3, [pc, #420]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a68      	ldr	r2, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a65      	ldr	r2, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fc82 	bl	80010e4 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fc7e 	bl	80010e4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e207      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b5b      	ldr	r3, [pc, #364]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0xc0>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fc6e 	bl	80010e4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fc6a 	bl	80010e4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1f3      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	4b51      	ldr	r3, [pc, #324]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0xe8>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d063      	beq.n	8001902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184e:	2b08      	cmp	r3, #8
 8001850:	d11c      	bne.n	800188c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001852:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x152>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1c7      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4937      	ldr	r1, [pc, #220]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e03a      	b.n	8001902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001894:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_RCC_OscConfig+0x244>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff fc23 	bl	80010e4 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff fc1f 	bl	80010e4 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1a8      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4925      	ldr	r1, [pc, #148]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_OscConfig+0x244>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fc02 	bl	80010e4 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fbfe 	bl	80010e4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e187      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d036      	beq.n	800197c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d016      	beq.n	8001944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_RCC_OscConfig+0x248>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fbe2 	bl	80010e4 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fbde 	bl	80010e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e167      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x200>
 8001942:	e01b      	b.n	800197c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x248>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fbcb 	bl	80010e4 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	e00e      	b.n	8001970 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff fbc7 	bl	80010e4 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d907      	bls.n	8001970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e150      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
 8001964:	40023800 	.word	0x40023800
 8001968:	42470000 	.word	0x42470000
 800196c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ea      	bne.n	8001952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8097 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10f      	bne.n	80019ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a7c      	ldr	r2, [pc, #496]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a73      	ldr	r2, [pc, #460]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fb87 	bl	80010e4 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff fb83 	bl	80010e4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e10c      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2ea>
 8001a00:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a63      	ldr	r2, [pc, #396]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	e01c      	b.n	8001a48 <HAL_RCC_OscConfig+0x324>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x30c>
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a5e      	ldr	r2, [pc, #376]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0x324>
 8001a30:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	4a57      	ldr	r2, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3c:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a42:	f023 0304 	bic.w	r3, r3, #4
 8001a46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff fb48 	bl	80010e4 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff fb44 	bl	80010e4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0cb      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0ee      	beq.n	8001a58 <HAL_RCC_OscConfig+0x334>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fb32 	bl	80010e4 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff fb2e 	bl	80010e4 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0b5      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	4a38      	ldr	r2, [pc, #224]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80a1 	beq.w	8001c04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d05c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d141      	bne.n	8001b5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fb02 	bl	80010e4 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff fafe 	bl	80010e4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e087      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fad7 	bl	80010e4 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff fad3 	bl	80010e4 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e05c      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x416>
 8001b58:	e054      	b.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fac0 	bl	80010e4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fabc 	bl	80010e4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e045      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x444>
 8001b86:	e03d      	b.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e038      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4ec>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d028      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d121      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d11a      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	3b01      	subs	r3, #1
 8001bea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0cc      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d90c      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d044      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d119      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e067      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f023 0203 	bic.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4934      	ldr	r1, [pc, #208]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7ff f9ee 	bl	80010e4 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f7ff f9ea 	bl	80010e4 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e04f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 020c 	and.w	r2, r3, #12
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1eb      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d20c      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f821 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f94e 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023c00 	.word	0x40023c00
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08003fd8 	.word	0x08003fd8
 8001dd8:	20000004 	.word	0x20000004
 8001ddc:	20000008 	.word	0x20000008

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de4:	b094      	sub	sp, #80	; 0x50
 8001de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	647b      	str	r3, [r7, #68]	; 0x44
 8001dec:	2300      	movs	r3, #0
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df0:	2300      	movs	r3, #0
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df8:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d00d      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x40>
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	f200 80e1 	bhi.w	8001fcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e12:	e0db      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e18:	e0db      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1a:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e1e:	e0d8      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2a:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d063      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e36:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e52:	4622      	mov	r2, r4
 8001e54:	462b      	mov	r3, r5
 8001e56:	f04f 0000 	mov.w	r0, #0
 8001e5a:	f04f 0100 	mov.w	r1, #0
 8001e5e:	0159      	lsls	r1, r3, #5
 8001e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e64:	0150      	lsls	r0, r2, #5
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	1a51      	subs	r1, r2, r1
 8001e6e:	6139      	str	r1, [r7, #16]
 8001e70:	4629      	mov	r1, r5
 8001e72:	eb63 0301 	sbc.w	r3, r3, r1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e84:	4659      	mov	r1, fp
 8001e86:	018b      	lsls	r3, r1, #6
 8001e88:	4651      	mov	r1, sl
 8001e8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e8e:	4651      	mov	r1, sl
 8001e90:	018a      	lsls	r2, r1, #6
 8001e92:	4651      	mov	r1, sl
 8001e94:	ebb2 0801 	subs.w	r8, r2, r1
 8001e98:	4659      	mov	r1, fp
 8001e9a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eb2:	4690      	mov	r8, r2
 8001eb4:	4699      	mov	r9, r3
 8001eb6:	4623      	mov	r3, r4
 8001eb8:	eb18 0303 	adds.w	r3, r8, r3
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	462b      	mov	r3, r5
 8001ec0:	eb49 0303 	adc.w	r3, r9, r3
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	024b      	lsls	r3, r1, #9
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001edc:	4621      	mov	r1, r4
 8001ede:	024a      	lsls	r2, r1, #9
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001eec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ef0:	f7fe f9ce 	bl	8000290 <__aeabi_uldivmod>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4613      	mov	r3, r2
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001efc:	e058      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	2200      	movs	r2, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	4611      	mov	r1, r2
 8001f0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f18:	4642      	mov	r2, r8
 8001f1a:	464b      	mov	r3, r9
 8001f1c:	f04f 0000 	mov.w	r0, #0
 8001f20:	f04f 0100 	mov.w	r1, #0
 8001f24:	0159      	lsls	r1, r3, #5
 8001f26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f2a:	0150      	lsls	r0, r2, #5
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4641      	mov	r1, r8
 8001f32:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f36:	4649      	mov	r1, r9
 8001f38:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f50:	ebb2 040a 	subs.w	r4, r2, sl
 8001f54:	eb63 050b 	sbc.w	r5, r3, fp
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	00eb      	lsls	r3, r5, #3
 8001f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f66:	00e2      	lsls	r2, r4, #3
 8001f68:	4614      	mov	r4, r2
 8001f6a:	461d      	mov	r5, r3
 8001f6c:	4643      	mov	r3, r8
 8001f6e:	18e3      	adds	r3, r4, r3
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	464b      	mov	r3, r9
 8001f74:	eb45 0303 	adc.w	r3, r5, r3
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f86:	4629      	mov	r1, r5
 8001f88:	028b      	lsls	r3, r1, #10
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f90:	4621      	mov	r1, r4
 8001f92:	028a      	lsls	r2, r1, #10
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	61fa      	str	r2, [r7, #28]
 8001fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa4:	f7fe f974 	bl	8000290 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4613      	mov	r3, r2
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fca:	e002      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3750      	adds	r7, #80	; 0x50
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	007a1200 	.word	0x007a1200

08001fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002008:	f7ff fff0 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	0a9b      	lsrs	r3, r3, #10
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	08003fe8 	.word	0x08003fe8

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002030:	f7ff ffdc 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0b5b      	lsrs	r3, r3, #13
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	08003fe8 	.word	0x08003fe8

08002054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e041      	b.n	80020ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fe48 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3304      	adds	r3, #4
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f000 fa96 	bl	80025c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d001      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e04e      	b.n	80021aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d022      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x80>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002136:	d01d      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x80>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <HAL_TIM_Base_Start_IT+0xc8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d018      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x80>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x80>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00e      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x80>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d009      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x80>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x80>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d111      	bne.n	8002198 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b06      	cmp	r3, #6
 8002184:	d010      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002196:	e007      	b.n	80021a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40010400 	.word	0x40010400
 80021cc:	40014000 	.word	0x40014000
 80021d0:	40001800 	.word	0x40001800

080021d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d122      	bne.n	8002230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d11b      	bne.n	8002230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0202 	mvn.w	r2, #2
 8002200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f9b5 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f9a7 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f9b8 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b04      	cmp	r3, #4
 800223c:	d122      	bne.n	8002284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b04      	cmp	r3, #4
 800224a:	d11b      	bne.n	8002284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0204 	mvn.w	r2, #4
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f98b 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f97d 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f98e 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b08      	cmp	r3, #8
 8002290:	d122      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b08      	cmp	r3, #8
 800229e:	d11b      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0208 	mvn.w	r2, #8
 80022a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2204      	movs	r2, #4
 80022ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f961 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 80022c4:	e005      	b.n	80022d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f953 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f964 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b10      	cmp	r3, #16
 80022e4:	d122      	bne.n	800232c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d11b      	bne.n	800232c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0210 	mvn.w	r2, #16
 80022fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2208      	movs	r2, #8
 8002302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f937 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f929 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f93a 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10e      	bne.n	8002358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0201 	mvn.w	r2, #1
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe f952 	bl	80005fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	2b80      	cmp	r3, #128	; 0x80
 8002364:	d10e      	bne.n	8002384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	2b80      	cmp	r3, #128	; 0x80
 8002372:	d107      	bne.n	8002384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800237c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fae0 	bl	8002944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b40      	cmp	r3, #64	; 0x40
 8002390:	d10e      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d107      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f8ff 	bl	80025ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d10e      	bne.n	80023dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d107      	bne.n	80023dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0220 	mvn.w	r2, #32
 80023d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 faaa 	bl	8002930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_TIM_ConfigClockSource+0x1c>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0b4      	b.n	800256a <HAL_TIM_ConfigClockSource+0x186>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800241e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002438:	d03e      	beq.n	80024b8 <HAL_TIM_ConfigClockSource+0xd4>
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243e:	f200 8087 	bhi.w	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002446:	f000 8086 	beq.w	8002556 <HAL_TIM_ConfigClockSource+0x172>
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	d87f      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b70      	cmp	r3, #112	; 0x70
 8002452:	d01a      	beq.n	800248a <HAL_TIM_ConfigClockSource+0xa6>
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d87b      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b60      	cmp	r3, #96	; 0x60
 800245a:	d050      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x11a>
 800245c:	2b60      	cmp	r3, #96	; 0x60
 800245e:	d877      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b50      	cmp	r3, #80	; 0x50
 8002462:	d03c      	beq.n	80024de <HAL_TIM_ConfigClockSource+0xfa>
 8002464:	2b50      	cmp	r3, #80	; 0x50
 8002466:	d873      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	d058      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x13a>
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d86f      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b30      	cmp	r3, #48	; 0x30
 8002472:	d064      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	d86b      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b20      	cmp	r3, #32
 800247a:	d060      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d867      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05c      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 8002484:	2b10      	cmp	r3, #16
 8002486:	d05a      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 8002488:	e062      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f000 f9ad 	bl	80027f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	609a      	str	r2, [r3, #8]
      break;
 80024b6:	e04f      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6899      	ldr	r1, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f000 f996 	bl	80027f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024da:	609a      	str	r2, [r3, #8]
      break;
 80024dc:	e03c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f000 f90a 	bl	8002704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2150      	movs	r1, #80	; 0x50
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f963 	bl	80027c2 <TIM_ITRx_SetConfig>
      break;
 80024fc:	e02c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	461a      	mov	r2, r3
 800250c:	f000 f929 	bl	8002762 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2160      	movs	r1, #96	; 0x60
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f953 	bl	80027c2 <TIM_ITRx_SetConfig>
      break;
 800251c:	e01c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	461a      	mov	r2, r3
 800252c:	f000 f8ea 	bl	8002704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f943 	bl	80027c2 <TIM_ITRx_SetConfig>
      break;
 800253c:	e00c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f000 f93a 	bl	80027c2 <TIM_ITRx_SetConfig>
      break;
 800254e:	e003      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      break;
 8002554:	e000      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a40      	ldr	r2, [pc, #256]	; (80026d8 <TIM_Base_SetConfig+0x114>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d00f      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3d      	ldr	r2, [pc, #244]	; (80026dc <TIM_Base_SetConfig+0x118>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00b      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a3c      	ldr	r2, [pc, #240]	; (80026e0 <TIM_Base_SetConfig+0x11c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3b      	ldr	r2, [pc, #236]	; (80026e4 <TIM_Base_SetConfig+0x120>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a3a      	ldr	r2, [pc, #232]	; (80026e8 <TIM_Base_SetConfig+0x124>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d108      	bne.n	8002616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2f      	ldr	r2, [pc, #188]	; (80026d8 <TIM_Base_SetConfig+0x114>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d02b      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002624:	d027      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <TIM_Base_SetConfig+0x118>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d023      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <TIM_Base_SetConfig+0x11c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01f      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <TIM_Base_SetConfig+0x120>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d01b      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a29      	ldr	r2, [pc, #164]	; (80026e8 <TIM_Base_SetConfig+0x124>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d017      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a28      	ldr	r2, [pc, #160]	; (80026ec <TIM_Base_SetConfig+0x128>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <TIM_Base_SetConfig+0x12c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00f      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <TIM_Base_SetConfig+0x130>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00b      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a25      	ldr	r2, [pc, #148]	; (80026f8 <TIM_Base_SetConfig+0x134>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a24      	ldr	r2, [pc, #144]	; (80026fc <TIM_Base_SetConfig+0x138>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d003      	beq.n	8002676 <TIM_Base_SetConfig+0xb2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a23      	ldr	r2, [pc, #140]	; (8002700 <TIM_Base_SetConfig+0x13c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d108      	bne.n	8002688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <TIM_Base_SetConfig+0x114>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d003      	beq.n	80026bc <TIM_Base_SetConfig+0xf8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <TIM_Base_SetConfig+0x124>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d103      	bne.n	80026c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	615a      	str	r2, [r3, #20]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40000800 	.word	0x40000800
 80026e4:	40000c00 	.word	0x40000c00
 80026e8:	40010400 	.word	0x40010400
 80026ec:	40014000 	.word	0x40014000
 80026f0:	40014400 	.word	0x40014400
 80026f4:	40014800 	.word	0x40014800
 80026f8:	40001800 	.word	0x40001800
 80026fc:	40001c00 	.word	0x40001c00
 8002700:	40002000 	.word	0x40002000

08002704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0201 	bic.w	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 030a 	bic.w	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]
}
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002762:	b480      	push	{r7}
 8002764:	b087      	sub	sp, #28
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f023 0210 	bic.w	r2, r3, #16
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800278c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	031b      	lsls	r3, r3, #12
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800279e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	621a      	str	r2, [r3, #32]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	f043 0307 	orr.w	r3, r3, #7
 80027e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	609a      	str	r2, [r3, #8]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	021a      	lsls	r2, r3, #8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	431a      	orrs	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800284c:	2302      	movs	r3, #2
 800284e:	e05a      	b.n	8002906 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a21      	ldr	r2, [pc, #132]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d01d      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d018      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10c      	bne.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40010000 	.word	0x40010000
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800
 8002920:	40000c00 	.word	0x40000c00
 8002924:	40010400 	.word	0x40010400
 8002928:	40014000 	.word	0x40014000
 800292c:	40001800 	.word	0x40001800

08002930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e03f      	b.n	80029ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe f9ee 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800299a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f829 	bl	80029f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b0c0      	sub	sp, #256	; 0x100
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a10:	68d9      	ldr	r1, [r3, #12]
 8002a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	ea40 0301 	orr.w	r3, r0, r1
 8002a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a4c:	f021 010c 	bic.w	r1, r1, #12
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	6999      	ldr	r1, [r3, #24]
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	ea40 0301 	orr.w	r3, r0, r1
 8002a7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b8f      	ldr	r3, [pc, #572]	; (8002cc0 <UART_SetConfig+0x2cc>)
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d005      	beq.n	8002a94 <UART_SetConfig+0xa0>
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b8d      	ldr	r3, [pc, #564]	; (8002cc4 <UART_SetConfig+0x2d0>)
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d104      	bne.n	8002a9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a94:	f7ff faca 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002a98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a9c:	e003      	b.n	8002aa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a9e:	f7ff fab1 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8002aa2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab0:	f040 810c 	bne.w	8002ccc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002abe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ac2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	462b      	mov	r3, r5
 8002aca:	1891      	adds	r1, r2, r2
 8002acc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ace:	415b      	adcs	r3, r3
 8002ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	eb12 0801 	adds.w	r8, r2, r1
 8002adc:	4629      	mov	r1, r5
 8002ade:	eb43 0901 	adc.w	r9, r3, r1
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	eb18 0303 	adds.w	r3, r8, r3
 8002b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b04:	462b      	mov	r3, r5
 8002b06:	eb49 0303 	adc.w	r3, r9, r3
 8002b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b22:	460b      	mov	r3, r1
 8002b24:	18db      	adds	r3, r3, r3
 8002b26:	653b      	str	r3, [r7, #80]	; 0x50
 8002b28:	4613      	mov	r3, r2
 8002b2a:	eb42 0303 	adc.w	r3, r2, r3
 8002b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b38:	f7fd fbaa 	bl	8000290 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002b42:	fba3 2302 	umull	r2, r3, r3, r2
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	011c      	lsls	r4, r3, #4
 8002b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	1891      	adds	r1, r2, r2
 8002b62:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b64:	415b      	adcs	r3, r3
 8002b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b72:	4649      	mov	r1, r9
 8002b74:	eb43 0b01 	adc.w	fp, r3, r1
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b8c:	4692      	mov	sl, r2
 8002b8e:	469b      	mov	fp, r3
 8002b90:	4643      	mov	r3, r8
 8002b92:	eb1a 0303 	adds.w	r3, sl, r3
 8002b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	18db      	adds	r3, r3, r3
 8002bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bce:	f7fd fb5f 	bl	8000290 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002bda:	fba3 2301 	umull	r2, r3, r3, r1
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2264      	movs	r2, #100	; 0x64
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	1acb      	subs	r3, r1, r3
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bee:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bfc:	441c      	add	r4, r3
 8002bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c10:	4642      	mov	r2, r8
 8002c12:	464b      	mov	r3, r9
 8002c14:	1891      	adds	r1, r2, r2
 8002c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c18:	415b      	adcs	r3, r3
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c20:	4641      	mov	r1, r8
 8002c22:	1851      	adds	r1, r2, r1
 8002c24:	6339      	str	r1, [r7, #48]	; 0x30
 8002c26:	4649      	mov	r1, r9
 8002c28:	414b      	adcs	r3, r1
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c38:	4659      	mov	r1, fp
 8002c3a:	00cb      	lsls	r3, r1, #3
 8002c3c:	4651      	mov	r1, sl
 8002c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c42:	4651      	mov	r1, sl
 8002c44:	00ca      	lsls	r2, r1, #3
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c54:	464b      	mov	r3, r9
 8002c56:	460a      	mov	r2, r1
 8002c58:	eb42 0303 	adc.w	r3, r2, r3
 8002c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c74:	460b      	mov	r3, r1
 8002c76:	18db      	adds	r3, r3, r3
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c8a:	f7fd fb01 	bl	8000290 <__aeabi_uldivmod>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002c94:	fba3 1302 	umull	r1, r3, r3, r2
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	2164      	movs	r1, #100	; 0x64
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	3332      	adds	r3, #50	; 0x32
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	f003 0207 	and.w	r2, r3, #7
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4422      	add	r2, r4
 8002cba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cbc:	e105      	b.n	8002eca <UART_SetConfig+0x4d6>
 8002cbe:	bf00      	nop
 8002cc0:	40011000 	.word	0x40011000
 8002cc4:	40011400 	.word	0x40011400
 8002cc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cde:	4642      	mov	r2, r8
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	1891      	adds	r1, r2, r2
 8002ce4:	6239      	str	r1, [r7, #32]
 8002ce6:	415b      	adcs	r3, r3
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cee:	4641      	mov	r1, r8
 8002cf0:	1854      	adds	r4, r2, r1
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	eb43 0501 	adc.w	r5, r3, r1
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	00eb      	lsls	r3, r5, #3
 8002d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d06:	00e2      	lsls	r2, r4, #3
 8002d08:	4614      	mov	r4, r2
 8002d0a:	461d      	mov	r5, r3
 8002d0c:	4643      	mov	r3, r8
 8002d0e:	18e3      	adds	r3, r4, r3
 8002d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d14:	464b      	mov	r3, r9
 8002d16:	eb45 0303 	adc.w	r3, r5, r3
 8002d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	008b      	lsls	r3, r1, #2
 8002d3e:	4621      	mov	r1, r4
 8002d40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d44:	4621      	mov	r1, r4
 8002d46:	008a      	lsls	r2, r1, #2
 8002d48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d4c:	f7fd faa0 	bl	8000290 <__aeabi_uldivmod>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4b60      	ldr	r3, [pc, #384]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002d56:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	011c      	lsls	r4, r3, #4
 8002d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d70:	4642      	mov	r2, r8
 8002d72:	464b      	mov	r3, r9
 8002d74:	1891      	adds	r1, r2, r2
 8002d76:	61b9      	str	r1, [r7, #24]
 8002d78:	415b      	adcs	r3, r3
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d80:	4641      	mov	r1, r8
 8002d82:	1851      	adds	r1, r2, r1
 8002d84:	6139      	str	r1, [r7, #16]
 8002d86:	4649      	mov	r1, r9
 8002d88:	414b      	adcs	r3, r1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d98:	4659      	mov	r1, fp
 8002d9a:	00cb      	lsls	r3, r1, #3
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002da2:	4651      	mov	r1, sl
 8002da4:	00ca      	lsls	r2, r1, #3
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	4642      	mov	r2, r8
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002db4:	464b      	mov	r3, r9
 8002db6:	460a      	mov	r2, r1
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002dd8:	4649      	mov	r1, r9
 8002dda:	008b      	lsls	r3, r1, #2
 8002ddc:	4641      	mov	r1, r8
 8002dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002de2:	4641      	mov	r1, r8
 8002de4:	008a      	lsls	r2, r1, #2
 8002de6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dea:	f7fd fa51 	bl	8000290 <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002df4:	fba3 1302 	umull	r1, r3, r3, r2
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	2164      	movs	r1, #100	; 0x64
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	3332      	adds	r3, #50	; 0x32
 8002e06:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e12:	441c      	add	r4, r3
 8002e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e18:	2200      	movs	r2, #0
 8002e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e1c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e22:	4642      	mov	r2, r8
 8002e24:	464b      	mov	r3, r9
 8002e26:	1891      	adds	r1, r2, r2
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	415b      	adcs	r3, r3
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e32:	4641      	mov	r1, r8
 8002e34:	1851      	adds	r1, r2, r1
 8002e36:	6039      	str	r1, [r7, #0]
 8002e38:	4649      	mov	r1, r9
 8002e3a:	414b      	adcs	r3, r1
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e4a:	4659      	mov	r1, fp
 8002e4c:	00cb      	lsls	r3, r1, #3
 8002e4e:	4651      	mov	r1, sl
 8002e50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e54:	4651      	mov	r1, sl
 8002e56:	00ca      	lsls	r2, r1, #3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4642      	mov	r2, r8
 8002e60:	189b      	adds	r3, r3, r2
 8002e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e64:	464b      	mov	r3, r9
 8002e66:	460a      	mov	r2, r1
 8002e68:	eb42 0303 	adc.w	r3, r2, r3
 8002e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	663b      	str	r3, [r7, #96]	; 0x60
 8002e78:	667a      	str	r2, [r7, #100]	; 0x64
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e86:	4649      	mov	r1, r9
 8002e88:	008b      	lsls	r3, r1, #2
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e90:	4641      	mov	r1, r8
 8002e92:	008a      	lsls	r2, r1, #2
 8002e94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e98:	f7fd f9fa 	bl	8000290 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	2164      	movs	r1, #100	; 0x64
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	3332      	adds	r3, #50	; 0x32
 8002eb4:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	f003 020f 	and.w	r2, r3, #15
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4422      	add	r2, r4
 8002ec8:	609a      	str	r2, [r3, #8]
}
 8002eca:	bf00      	nop
 8002ecc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	51eb851f 	.word	0x51eb851f

08002edc <__errno>:
 8002edc:	4b01      	ldr	r3, [pc, #4]	; (8002ee4 <__errno+0x8>)
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000010 	.word	0x20000010

08002ee8 <__libc_init_array>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	4d0d      	ldr	r5, [pc, #52]	; (8002f20 <__libc_init_array+0x38>)
 8002eec:	4c0d      	ldr	r4, [pc, #52]	; (8002f24 <__libc_init_array+0x3c>)
 8002eee:	1b64      	subs	r4, r4, r5
 8002ef0:	10a4      	asrs	r4, r4, #2
 8002ef2:	2600      	movs	r6, #0
 8002ef4:	42a6      	cmp	r6, r4
 8002ef6:	d109      	bne.n	8002f0c <__libc_init_array+0x24>
 8002ef8:	4d0b      	ldr	r5, [pc, #44]	; (8002f28 <__libc_init_array+0x40>)
 8002efa:	4c0c      	ldr	r4, [pc, #48]	; (8002f2c <__libc_init_array+0x44>)
 8002efc:	f001 f824 	bl	8003f48 <_init>
 8002f00:	1b64      	subs	r4, r4, r5
 8002f02:	10a4      	asrs	r4, r4, #2
 8002f04:	2600      	movs	r6, #0
 8002f06:	42a6      	cmp	r6, r4
 8002f08:	d105      	bne.n	8002f16 <__libc_init_array+0x2e>
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
 8002f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f10:	4798      	blx	r3
 8002f12:	3601      	adds	r6, #1
 8002f14:	e7ee      	b.n	8002ef4 <__libc_init_array+0xc>
 8002f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1a:	4798      	blx	r3
 8002f1c:	3601      	adds	r6, #1
 8002f1e:	e7f2      	b.n	8002f06 <__libc_init_array+0x1e>
 8002f20:	08004090 	.word	0x08004090
 8002f24:	08004090 	.word	0x08004090
 8002f28:	08004090 	.word	0x08004090
 8002f2c:	08004094 	.word	0x08004094

08002f30 <memset>:
 8002f30:	4402      	add	r2, r0
 8002f32:	4603      	mov	r3, r0
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d100      	bne.n	8002f3a <memset+0xa>
 8002f38:	4770      	bx	lr
 8002f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f3e:	e7f9      	b.n	8002f34 <memset+0x4>

08002f40 <iprintf>:
 8002f40:	b40f      	push	{r0, r1, r2, r3}
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <iprintf+0x2c>)
 8002f44:	b513      	push	{r0, r1, r4, lr}
 8002f46:	681c      	ldr	r4, [r3, #0]
 8002f48:	b124      	cbz	r4, 8002f54 <iprintf+0x14>
 8002f4a:	69a3      	ldr	r3, [r4, #24]
 8002f4c:	b913      	cbnz	r3, 8002f54 <iprintf+0x14>
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f000 fa5e 	bl	8003410 <__sinit>
 8002f54:	ab05      	add	r3, sp, #20
 8002f56:	9a04      	ldr	r2, [sp, #16]
 8002f58:	68a1      	ldr	r1, [r4, #8]
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f000 fc67 	bl	8003830 <_vfiprintf_r>
 8002f62:	b002      	add	sp, #8
 8002f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f68:	b004      	add	sp, #16
 8002f6a:	4770      	bx	lr
 8002f6c:	20000010 	.word	0x20000010

08002f70 <_puts_r>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	460e      	mov	r6, r1
 8002f74:	4605      	mov	r5, r0
 8002f76:	b118      	cbz	r0, 8002f80 <_puts_r+0x10>
 8002f78:	6983      	ldr	r3, [r0, #24]
 8002f7a:	b90b      	cbnz	r3, 8002f80 <_puts_r+0x10>
 8002f7c:	f000 fa48 	bl	8003410 <__sinit>
 8002f80:	69ab      	ldr	r3, [r5, #24]
 8002f82:	68ac      	ldr	r4, [r5, #8]
 8002f84:	b913      	cbnz	r3, 8002f8c <_puts_r+0x1c>
 8002f86:	4628      	mov	r0, r5
 8002f88:	f000 fa42 	bl	8003410 <__sinit>
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <_puts_r+0xd0>)
 8002f8e:	429c      	cmp	r4, r3
 8002f90:	d120      	bne.n	8002fd4 <_puts_r+0x64>
 8002f92:	686c      	ldr	r4, [r5, #4]
 8002f94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f96:	07db      	lsls	r3, r3, #31
 8002f98:	d405      	bmi.n	8002fa6 <_puts_r+0x36>
 8002f9a:	89a3      	ldrh	r3, [r4, #12]
 8002f9c:	0598      	lsls	r0, r3, #22
 8002f9e:	d402      	bmi.n	8002fa6 <_puts_r+0x36>
 8002fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fa2:	f000 fad3 	bl	800354c <__retarget_lock_acquire_recursive>
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	0719      	lsls	r1, r3, #28
 8002faa:	d51d      	bpl.n	8002fe8 <_puts_r+0x78>
 8002fac:	6923      	ldr	r3, [r4, #16]
 8002fae:	b1db      	cbz	r3, 8002fe8 <_puts_r+0x78>
 8002fb0:	3e01      	subs	r6, #1
 8002fb2:	68a3      	ldr	r3, [r4, #8]
 8002fb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	60a3      	str	r3, [r4, #8]
 8002fbc:	bb39      	cbnz	r1, 800300e <_puts_r+0x9e>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da38      	bge.n	8003034 <_puts_r+0xc4>
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	210a      	movs	r1, #10
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f000 f848 	bl	800305c <__swbuf_r>
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d011      	beq.n	8002ff4 <_puts_r+0x84>
 8002fd0:	250a      	movs	r5, #10
 8002fd2:	e011      	b.n	8002ff8 <_puts_r+0x88>
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <_puts_r+0xd4>)
 8002fd6:	429c      	cmp	r4, r3
 8002fd8:	d101      	bne.n	8002fde <_puts_r+0x6e>
 8002fda:	68ac      	ldr	r4, [r5, #8]
 8002fdc:	e7da      	b.n	8002f94 <_puts_r+0x24>
 8002fde:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <_puts_r+0xd8>)
 8002fe0:	429c      	cmp	r4, r3
 8002fe2:	bf08      	it	eq
 8002fe4:	68ec      	ldreq	r4, [r5, #12]
 8002fe6:	e7d5      	b.n	8002f94 <_puts_r+0x24>
 8002fe8:	4621      	mov	r1, r4
 8002fea:	4628      	mov	r0, r5
 8002fec:	f000 f888 	bl	8003100 <__swsetup_r>
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d0dd      	beq.n	8002fb0 <_puts_r+0x40>
 8002ff4:	f04f 35ff 	mov.w	r5, #4294967295
 8002ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ffa:	07da      	lsls	r2, r3, #31
 8002ffc:	d405      	bmi.n	800300a <_puts_r+0x9a>
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	059b      	lsls	r3, r3, #22
 8003002:	d402      	bmi.n	800300a <_puts_r+0x9a>
 8003004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003006:	f000 faa2 	bl	800354e <__retarget_lock_release_recursive>
 800300a:	4628      	mov	r0, r5
 800300c:	bd70      	pop	{r4, r5, r6, pc}
 800300e:	2b00      	cmp	r3, #0
 8003010:	da04      	bge.n	800301c <_puts_r+0xac>
 8003012:	69a2      	ldr	r2, [r4, #24]
 8003014:	429a      	cmp	r2, r3
 8003016:	dc06      	bgt.n	8003026 <_puts_r+0xb6>
 8003018:	290a      	cmp	r1, #10
 800301a:	d004      	beq.n	8003026 <_puts_r+0xb6>
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	6022      	str	r2, [r4, #0]
 8003022:	7019      	strb	r1, [r3, #0]
 8003024:	e7c5      	b.n	8002fb2 <_puts_r+0x42>
 8003026:	4622      	mov	r2, r4
 8003028:	4628      	mov	r0, r5
 800302a:	f000 f817 	bl	800305c <__swbuf_r>
 800302e:	3001      	adds	r0, #1
 8003030:	d1bf      	bne.n	8002fb2 <_puts_r+0x42>
 8003032:	e7df      	b.n	8002ff4 <_puts_r+0x84>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	250a      	movs	r5, #10
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	6022      	str	r2, [r4, #0]
 800303c:	701d      	strb	r5, [r3, #0]
 800303e:	e7db      	b.n	8002ff8 <_puts_r+0x88>
 8003040:	08004014 	.word	0x08004014
 8003044:	08004034 	.word	0x08004034
 8003048:	08003ff4 	.word	0x08003ff4

0800304c <puts>:
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <puts+0xc>)
 800304e:	4601      	mov	r1, r0
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	f7ff bf8d 	b.w	8002f70 <_puts_r>
 8003056:	bf00      	nop
 8003058:	20000010 	.word	0x20000010

0800305c <__swbuf_r>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	460e      	mov	r6, r1
 8003060:	4614      	mov	r4, r2
 8003062:	4605      	mov	r5, r0
 8003064:	b118      	cbz	r0, 800306e <__swbuf_r+0x12>
 8003066:	6983      	ldr	r3, [r0, #24]
 8003068:	b90b      	cbnz	r3, 800306e <__swbuf_r+0x12>
 800306a:	f000 f9d1 	bl	8003410 <__sinit>
 800306e:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <__swbuf_r+0x98>)
 8003070:	429c      	cmp	r4, r3
 8003072:	d12b      	bne.n	80030cc <__swbuf_r+0x70>
 8003074:	686c      	ldr	r4, [r5, #4]
 8003076:	69a3      	ldr	r3, [r4, #24]
 8003078:	60a3      	str	r3, [r4, #8]
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	071a      	lsls	r2, r3, #28
 800307e:	d52f      	bpl.n	80030e0 <__swbuf_r+0x84>
 8003080:	6923      	ldr	r3, [r4, #16]
 8003082:	b36b      	cbz	r3, 80030e0 <__swbuf_r+0x84>
 8003084:	6923      	ldr	r3, [r4, #16]
 8003086:	6820      	ldr	r0, [r4, #0]
 8003088:	1ac0      	subs	r0, r0, r3
 800308a:	6963      	ldr	r3, [r4, #20]
 800308c:	b2f6      	uxtb	r6, r6
 800308e:	4283      	cmp	r3, r0
 8003090:	4637      	mov	r7, r6
 8003092:	dc04      	bgt.n	800309e <__swbuf_r+0x42>
 8003094:	4621      	mov	r1, r4
 8003096:	4628      	mov	r0, r5
 8003098:	f000 f926 	bl	80032e8 <_fflush_r>
 800309c:	bb30      	cbnz	r0, 80030ec <__swbuf_r+0x90>
 800309e:	68a3      	ldr	r3, [r4, #8]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	60a3      	str	r3, [r4, #8]
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	6022      	str	r2, [r4, #0]
 80030aa:	701e      	strb	r6, [r3, #0]
 80030ac:	6963      	ldr	r3, [r4, #20]
 80030ae:	3001      	adds	r0, #1
 80030b0:	4283      	cmp	r3, r0
 80030b2:	d004      	beq.n	80030be <__swbuf_r+0x62>
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	07db      	lsls	r3, r3, #31
 80030b8:	d506      	bpl.n	80030c8 <__swbuf_r+0x6c>
 80030ba:	2e0a      	cmp	r6, #10
 80030bc:	d104      	bne.n	80030c8 <__swbuf_r+0x6c>
 80030be:	4621      	mov	r1, r4
 80030c0:	4628      	mov	r0, r5
 80030c2:	f000 f911 	bl	80032e8 <_fflush_r>
 80030c6:	b988      	cbnz	r0, 80030ec <__swbuf_r+0x90>
 80030c8:	4638      	mov	r0, r7
 80030ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <__swbuf_r+0x9c>)
 80030ce:	429c      	cmp	r4, r3
 80030d0:	d101      	bne.n	80030d6 <__swbuf_r+0x7a>
 80030d2:	68ac      	ldr	r4, [r5, #8]
 80030d4:	e7cf      	b.n	8003076 <__swbuf_r+0x1a>
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <__swbuf_r+0xa0>)
 80030d8:	429c      	cmp	r4, r3
 80030da:	bf08      	it	eq
 80030dc:	68ec      	ldreq	r4, [r5, #12]
 80030de:	e7ca      	b.n	8003076 <__swbuf_r+0x1a>
 80030e0:	4621      	mov	r1, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	f000 f80c 	bl	8003100 <__swsetup_r>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d0cb      	beq.n	8003084 <__swbuf_r+0x28>
 80030ec:	f04f 37ff 	mov.w	r7, #4294967295
 80030f0:	e7ea      	b.n	80030c8 <__swbuf_r+0x6c>
 80030f2:	bf00      	nop
 80030f4:	08004014 	.word	0x08004014
 80030f8:	08004034 	.word	0x08004034
 80030fc:	08003ff4 	.word	0x08003ff4

08003100 <__swsetup_r>:
 8003100:	4b32      	ldr	r3, [pc, #200]	; (80031cc <__swsetup_r+0xcc>)
 8003102:	b570      	push	{r4, r5, r6, lr}
 8003104:	681d      	ldr	r5, [r3, #0]
 8003106:	4606      	mov	r6, r0
 8003108:	460c      	mov	r4, r1
 800310a:	b125      	cbz	r5, 8003116 <__swsetup_r+0x16>
 800310c:	69ab      	ldr	r3, [r5, #24]
 800310e:	b913      	cbnz	r3, 8003116 <__swsetup_r+0x16>
 8003110:	4628      	mov	r0, r5
 8003112:	f000 f97d 	bl	8003410 <__sinit>
 8003116:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <__swsetup_r+0xd0>)
 8003118:	429c      	cmp	r4, r3
 800311a:	d10f      	bne.n	800313c <__swsetup_r+0x3c>
 800311c:	686c      	ldr	r4, [r5, #4]
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003124:	0719      	lsls	r1, r3, #28
 8003126:	d42c      	bmi.n	8003182 <__swsetup_r+0x82>
 8003128:	06dd      	lsls	r5, r3, #27
 800312a:	d411      	bmi.n	8003150 <__swsetup_r+0x50>
 800312c:	2309      	movs	r3, #9
 800312e:	6033      	str	r3, [r6, #0]
 8003130:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003134:	81a3      	strh	r3, [r4, #12]
 8003136:	f04f 30ff 	mov.w	r0, #4294967295
 800313a:	e03e      	b.n	80031ba <__swsetup_r+0xba>
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <__swsetup_r+0xd4>)
 800313e:	429c      	cmp	r4, r3
 8003140:	d101      	bne.n	8003146 <__swsetup_r+0x46>
 8003142:	68ac      	ldr	r4, [r5, #8]
 8003144:	e7eb      	b.n	800311e <__swsetup_r+0x1e>
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <__swsetup_r+0xd8>)
 8003148:	429c      	cmp	r4, r3
 800314a:	bf08      	it	eq
 800314c:	68ec      	ldreq	r4, [r5, #12]
 800314e:	e7e6      	b.n	800311e <__swsetup_r+0x1e>
 8003150:	0758      	lsls	r0, r3, #29
 8003152:	d512      	bpl.n	800317a <__swsetup_r+0x7a>
 8003154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003156:	b141      	cbz	r1, 800316a <__swsetup_r+0x6a>
 8003158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800315c:	4299      	cmp	r1, r3
 800315e:	d002      	beq.n	8003166 <__swsetup_r+0x66>
 8003160:	4630      	mov	r0, r6
 8003162:	f000 fa5b 	bl	800361c <_free_r>
 8003166:	2300      	movs	r3, #0
 8003168:	6363      	str	r3, [r4, #52]	; 0x34
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003170:	81a3      	strh	r3, [r4, #12]
 8003172:	2300      	movs	r3, #0
 8003174:	6063      	str	r3, [r4, #4]
 8003176:	6923      	ldr	r3, [r4, #16]
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	89a3      	ldrh	r3, [r4, #12]
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	81a3      	strh	r3, [r4, #12]
 8003182:	6923      	ldr	r3, [r4, #16]
 8003184:	b94b      	cbnz	r3, 800319a <__swsetup_r+0x9a>
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800318c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003190:	d003      	beq.n	800319a <__swsetup_r+0x9a>
 8003192:	4621      	mov	r1, r4
 8003194:	4630      	mov	r0, r6
 8003196:	f000 fa01 	bl	800359c <__smakebuf_r>
 800319a:	89a0      	ldrh	r0, [r4, #12]
 800319c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031a0:	f010 0301 	ands.w	r3, r0, #1
 80031a4:	d00a      	beq.n	80031bc <__swsetup_r+0xbc>
 80031a6:	2300      	movs	r3, #0
 80031a8:	60a3      	str	r3, [r4, #8]
 80031aa:	6963      	ldr	r3, [r4, #20]
 80031ac:	425b      	negs	r3, r3
 80031ae:	61a3      	str	r3, [r4, #24]
 80031b0:	6923      	ldr	r3, [r4, #16]
 80031b2:	b943      	cbnz	r3, 80031c6 <__swsetup_r+0xc6>
 80031b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031b8:	d1ba      	bne.n	8003130 <__swsetup_r+0x30>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	0781      	lsls	r1, r0, #30
 80031be:	bf58      	it	pl
 80031c0:	6963      	ldrpl	r3, [r4, #20]
 80031c2:	60a3      	str	r3, [r4, #8]
 80031c4:	e7f4      	b.n	80031b0 <__swsetup_r+0xb0>
 80031c6:	2000      	movs	r0, #0
 80031c8:	e7f7      	b.n	80031ba <__swsetup_r+0xba>
 80031ca:	bf00      	nop
 80031cc:	20000010 	.word	0x20000010
 80031d0:	08004014 	.word	0x08004014
 80031d4:	08004034 	.word	0x08004034
 80031d8:	08003ff4 	.word	0x08003ff4

080031dc <__sflush_r>:
 80031dc:	898a      	ldrh	r2, [r1, #12]
 80031de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e2:	4605      	mov	r5, r0
 80031e4:	0710      	lsls	r0, r2, #28
 80031e6:	460c      	mov	r4, r1
 80031e8:	d458      	bmi.n	800329c <__sflush_r+0xc0>
 80031ea:	684b      	ldr	r3, [r1, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	dc05      	bgt.n	80031fc <__sflush_r+0x20>
 80031f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	dc02      	bgt.n	80031fc <__sflush_r+0x20>
 80031f6:	2000      	movs	r0, #0
 80031f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031fe:	2e00      	cmp	r6, #0
 8003200:	d0f9      	beq.n	80031f6 <__sflush_r+0x1a>
 8003202:	2300      	movs	r3, #0
 8003204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003208:	682f      	ldr	r7, [r5, #0]
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	d032      	beq.n	8003274 <__sflush_r+0x98>
 800320e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	075a      	lsls	r2, r3, #29
 8003214:	d505      	bpl.n	8003222 <__sflush_r+0x46>
 8003216:	6863      	ldr	r3, [r4, #4]
 8003218:	1ac0      	subs	r0, r0, r3
 800321a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800321c:	b10b      	cbz	r3, 8003222 <__sflush_r+0x46>
 800321e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003220:	1ac0      	subs	r0, r0, r3
 8003222:	2300      	movs	r3, #0
 8003224:	4602      	mov	r2, r0
 8003226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003228:	6a21      	ldr	r1, [r4, #32]
 800322a:	4628      	mov	r0, r5
 800322c:	47b0      	blx	r6
 800322e:	1c43      	adds	r3, r0, #1
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	d106      	bne.n	8003242 <__sflush_r+0x66>
 8003234:	6829      	ldr	r1, [r5, #0]
 8003236:	291d      	cmp	r1, #29
 8003238:	d82c      	bhi.n	8003294 <__sflush_r+0xb8>
 800323a:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <__sflush_r+0x108>)
 800323c:	40ca      	lsrs	r2, r1
 800323e:	07d6      	lsls	r6, r2, #31
 8003240:	d528      	bpl.n	8003294 <__sflush_r+0xb8>
 8003242:	2200      	movs	r2, #0
 8003244:	6062      	str	r2, [r4, #4]
 8003246:	04d9      	lsls	r1, r3, #19
 8003248:	6922      	ldr	r2, [r4, #16]
 800324a:	6022      	str	r2, [r4, #0]
 800324c:	d504      	bpl.n	8003258 <__sflush_r+0x7c>
 800324e:	1c42      	adds	r2, r0, #1
 8003250:	d101      	bne.n	8003256 <__sflush_r+0x7a>
 8003252:	682b      	ldr	r3, [r5, #0]
 8003254:	b903      	cbnz	r3, 8003258 <__sflush_r+0x7c>
 8003256:	6560      	str	r0, [r4, #84]	; 0x54
 8003258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800325a:	602f      	str	r7, [r5, #0]
 800325c:	2900      	cmp	r1, #0
 800325e:	d0ca      	beq.n	80031f6 <__sflush_r+0x1a>
 8003260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003264:	4299      	cmp	r1, r3
 8003266:	d002      	beq.n	800326e <__sflush_r+0x92>
 8003268:	4628      	mov	r0, r5
 800326a:	f000 f9d7 	bl	800361c <_free_r>
 800326e:	2000      	movs	r0, #0
 8003270:	6360      	str	r0, [r4, #52]	; 0x34
 8003272:	e7c1      	b.n	80031f8 <__sflush_r+0x1c>
 8003274:	6a21      	ldr	r1, [r4, #32]
 8003276:	2301      	movs	r3, #1
 8003278:	4628      	mov	r0, r5
 800327a:	47b0      	blx	r6
 800327c:	1c41      	adds	r1, r0, #1
 800327e:	d1c7      	bne.n	8003210 <__sflush_r+0x34>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0c4      	beq.n	8003210 <__sflush_r+0x34>
 8003286:	2b1d      	cmp	r3, #29
 8003288:	d001      	beq.n	800328e <__sflush_r+0xb2>
 800328a:	2b16      	cmp	r3, #22
 800328c:	d101      	bne.n	8003292 <__sflush_r+0xb6>
 800328e:	602f      	str	r7, [r5, #0]
 8003290:	e7b1      	b.n	80031f6 <__sflush_r+0x1a>
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003298:	81a3      	strh	r3, [r4, #12]
 800329a:	e7ad      	b.n	80031f8 <__sflush_r+0x1c>
 800329c:	690f      	ldr	r7, [r1, #16]
 800329e:	2f00      	cmp	r7, #0
 80032a0:	d0a9      	beq.n	80031f6 <__sflush_r+0x1a>
 80032a2:	0793      	lsls	r3, r2, #30
 80032a4:	680e      	ldr	r6, [r1, #0]
 80032a6:	bf08      	it	eq
 80032a8:	694b      	ldreq	r3, [r1, #20]
 80032aa:	600f      	str	r7, [r1, #0]
 80032ac:	bf18      	it	ne
 80032ae:	2300      	movne	r3, #0
 80032b0:	eba6 0807 	sub.w	r8, r6, r7
 80032b4:	608b      	str	r3, [r1, #8]
 80032b6:	f1b8 0f00 	cmp.w	r8, #0
 80032ba:	dd9c      	ble.n	80031f6 <__sflush_r+0x1a>
 80032bc:	6a21      	ldr	r1, [r4, #32]
 80032be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032c0:	4643      	mov	r3, r8
 80032c2:	463a      	mov	r2, r7
 80032c4:	4628      	mov	r0, r5
 80032c6:	47b0      	blx	r6
 80032c8:	2800      	cmp	r0, #0
 80032ca:	dc06      	bgt.n	80032da <__sflush_r+0xfe>
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295
 80032d8:	e78e      	b.n	80031f8 <__sflush_r+0x1c>
 80032da:	4407      	add	r7, r0
 80032dc:	eba8 0800 	sub.w	r8, r8, r0
 80032e0:	e7e9      	b.n	80032b6 <__sflush_r+0xda>
 80032e2:	bf00      	nop
 80032e4:	20400001 	.word	0x20400001

080032e8 <_fflush_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	690b      	ldr	r3, [r1, #16]
 80032ec:	4605      	mov	r5, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	b913      	cbnz	r3, 80032f8 <_fflush_r+0x10>
 80032f2:	2500      	movs	r5, #0
 80032f4:	4628      	mov	r0, r5
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	b118      	cbz	r0, 8003302 <_fflush_r+0x1a>
 80032fa:	6983      	ldr	r3, [r0, #24]
 80032fc:	b90b      	cbnz	r3, 8003302 <_fflush_r+0x1a>
 80032fe:	f000 f887 	bl	8003410 <__sinit>
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <_fflush_r+0x6c>)
 8003304:	429c      	cmp	r4, r3
 8003306:	d11b      	bne.n	8003340 <_fflush_r+0x58>
 8003308:	686c      	ldr	r4, [r5, #4]
 800330a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0ef      	beq.n	80032f2 <_fflush_r+0xa>
 8003312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003314:	07d0      	lsls	r0, r2, #31
 8003316:	d404      	bmi.n	8003322 <_fflush_r+0x3a>
 8003318:	0599      	lsls	r1, r3, #22
 800331a:	d402      	bmi.n	8003322 <_fflush_r+0x3a>
 800331c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800331e:	f000 f915 	bl	800354c <__retarget_lock_acquire_recursive>
 8003322:	4628      	mov	r0, r5
 8003324:	4621      	mov	r1, r4
 8003326:	f7ff ff59 	bl	80031dc <__sflush_r>
 800332a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800332c:	07da      	lsls	r2, r3, #31
 800332e:	4605      	mov	r5, r0
 8003330:	d4e0      	bmi.n	80032f4 <_fflush_r+0xc>
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	059b      	lsls	r3, r3, #22
 8003336:	d4dd      	bmi.n	80032f4 <_fflush_r+0xc>
 8003338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800333a:	f000 f908 	bl	800354e <__retarget_lock_release_recursive>
 800333e:	e7d9      	b.n	80032f4 <_fflush_r+0xc>
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <_fflush_r+0x70>)
 8003342:	429c      	cmp	r4, r3
 8003344:	d101      	bne.n	800334a <_fflush_r+0x62>
 8003346:	68ac      	ldr	r4, [r5, #8]
 8003348:	e7df      	b.n	800330a <_fflush_r+0x22>
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <_fflush_r+0x74>)
 800334c:	429c      	cmp	r4, r3
 800334e:	bf08      	it	eq
 8003350:	68ec      	ldreq	r4, [r5, #12]
 8003352:	e7da      	b.n	800330a <_fflush_r+0x22>
 8003354:	08004014 	.word	0x08004014
 8003358:	08004034 	.word	0x08004034
 800335c:	08003ff4 	.word	0x08003ff4

08003360 <std>:
 8003360:	2300      	movs	r3, #0
 8003362:	b510      	push	{r4, lr}
 8003364:	4604      	mov	r4, r0
 8003366:	e9c0 3300 	strd	r3, r3, [r0]
 800336a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800336e:	6083      	str	r3, [r0, #8]
 8003370:	8181      	strh	r1, [r0, #12]
 8003372:	6643      	str	r3, [r0, #100]	; 0x64
 8003374:	81c2      	strh	r2, [r0, #14]
 8003376:	6183      	str	r3, [r0, #24]
 8003378:	4619      	mov	r1, r3
 800337a:	2208      	movs	r2, #8
 800337c:	305c      	adds	r0, #92	; 0x5c
 800337e:	f7ff fdd7 	bl	8002f30 <memset>
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <std+0x38>)
 8003384:	6263      	str	r3, [r4, #36]	; 0x24
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <std+0x3c>)
 8003388:	62a3      	str	r3, [r4, #40]	; 0x28
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <std+0x40>)
 800338c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <std+0x44>)
 8003390:	6224      	str	r4, [r4, #32]
 8003392:	6323      	str	r3, [r4, #48]	; 0x30
 8003394:	bd10      	pop	{r4, pc}
 8003396:	bf00      	nop
 8003398:	08003dd9 	.word	0x08003dd9
 800339c:	08003dfb 	.word	0x08003dfb
 80033a0:	08003e33 	.word	0x08003e33
 80033a4:	08003e57 	.word	0x08003e57

080033a8 <_cleanup_r>:
 80033a8:	4901      	ldr	r1, [pc, #4]	; (80033b0 <_cleanup_r+0x8>)
 80033aa:	f000 b8af 	b.w	800350c <_fwalk_reent>
 80033ae:	bf00      	nop
 80033b0:	080032e9 	.word	0x080032e9

080033b4 <__sfmoreglue>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	2268      	movs	r2, #104	; 0x68
 80033b8:	1e4d      	subs	r5, r1, #1
 80033ba:	4355      	muls	r5, r2
 80033bc:	460e      	mov	r6, r1
 80033be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033c2:	f000 f997 	bl	80036f4 <_malloc_r>
 80033c6:	4604      	mov	r4, r0
 80033c8:	b140      	cbz	r0, 80033dc <__sfmoreglue+0x28>
 80033ca:	2100      	movs	r1, #0
 80033cc:	e9c0 1600 	strd	r1, r6, [r0]
 80033d0:	300c      	adds	r0, #12
 80033d2:	60a0      	str	r0, [r4, #8]
 80033d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033d8:	f7ff fdaa 	bl	8002f30 <memset>
 80033dc:	4620      	mov	r0, r4
 80033de:	bd70      	pop	{r4, r5, r6, pc}

080033e0 <__sfp_lock_acquire>:
 80033e0:	4801      	ldr	r0, [pc, #4]	; (80033e8 <__sfp_lock_acquire+0x8>)
 80033e2:	f000 b8b3 	b.w	800354c <__retarget_lock_acquire_recursive>
 80033e6:	bf00      	nop
 80033e8:	2000012d 	.word	0x2000012d

080033ec <__sfp_lock_release>:
 80033ec:	4801      	ldr	r0, [pc, #4]	; (80033f4 <__sfp_lock_release+0x8>)
 80033ee:	f000 b8ae 	b.w	800354e <__retarget_lock_release_recursive>
 80033f2:	bf00      	nop
 80033f4:	2000012d 	.word	0x2000012d

080033f8 <__sinit_lock_acquire>:
 80033f8:	4801      	ldr	r0, [pc, #4]	; (8003400 <__sinit_lock_acquire+0x8>)
 80033fa:	f000 b8a7 	b.w	800354c <__retarget_lock_acquire_recursive>
 80033fe:	bf00      	nop
 8003400:	2000012e 	.word	0x2000012e

08003404 <__sinit_lock_release>:
 8003404:	4801      	ldr	r0, [pc, #4]	; (800340c <__sinit_lock_release+0x8>)
 8003406:	f000 b8a2 	b.w	800354e <__retarget_lock_release_recursive>
 800340a:	bf00      	nop
 800340c:	2000012e 	.word	0x2000012e

08003410 <__sinit>:
 8003410:	b510      	push	{r4, lr}
 8003412:	4604      	mov	r4, r0
 8003414:	f7ff fff0 	bl	80033f8 <__sinit_lock_acquire>
 8003418:	69a3      	ldr	r3, [r4, #24]
 800341a:	b11b      	cbz	r3, 8003424 <__sinit+0x14>
 800341c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003420:	f7ff bff0 	b.w	8003404 <__sinit_lock_release>
 8003424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003428:	6523      	str	r3, [r4, #80]	; 0x50
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <__sinit+0x68>)
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <__sinit+0x6c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	62a2      	str	r2, [r4, #40]	; 0x28
 8003432:	42a3      	cmp	r3, r4
 8003434:	bf04      	itt	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	61a3      	streq	r3, [r4, #24]
 800343a:	4620      	mov	r0, r4
 800343c:	f000 f820 	bl	8003480 <__sfp>
 8003440:	6060      	str	r0, [r4, #4]
 8003442:	4620      	mov	r0, r4
 8003444:	f000 f81c 	bl	8003480 <__sfp>
 8003448:	60a0      	str	r0, [r4, #8]
 800344a:	4620      	mov	r0, r4
 800344c:	f000 f818 	bl	8003480 <__sfp>
 8003450:	2200      	movs	r2, #0
 8003452:	60e0      	str	r0, [r4, #12]
 8003454:	2104      	movs	r1, #4
 8003456:	6860      	ldr	r0, [r4, #4]
 8003458:	f7ff ff82 	bl	8003360 <std>
 800345c:	68a0      	ldr	r0, [r4, #8]
 800345e:	2201      	movs	r2, #1
 8003460:	2109      	movs	r1, #9
 8003462:	f7ff ff7d 	bl	8003360 <std>
 8003466:	68e0      	ldr	r0, [r4, #12]
 8003468:	2202      	movs	r2, #2
 800346a:	2112      	movs	r1, #18
 800346c:	f7ff ff78 	bl	8003360 <std>
 8003470:	2301      	movs	r3, #1
 8003472:	61a3      	str	r3, [r4, #24]
 8003474:	e7d2      	b.n	800341c <__sinit+0xc>
 8003476:	bf00      	nop
 8003478:	08003ff0 	.word	0x08003ff0
 800347c:	080033a9 	.word	0x080033a9

08003480 <__sfp>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	4607      	mov	r7, r0
 8003484:	f7ff ffac 	bl	80033e0 <__sfp_lock_acquire>
 8003488:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <__sfp+0x84>)
 800348a:	681e      	ldr	r6, [r3, #0]
 800348c:	69b3      	ldr	r3, [r6, #24]
 800348e:	b913      	cbnz	r3, 8003496 <__sfp+0x16>
 8003490:	4630      	mov	r0, r6
 8003492:	f7ff ffbd 	bl	8003410 <__sinit>
 8003496:	3648      	adds	r6, #72	; 0x48
 8003498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800349c:	3b01      	subs	r3, #1
 800349e:	d503      	bpl.n	80034a8 <__sfp+0x28>
 80034a0:	6833      	ldr	r3, [r6, #0]
 80034a2:	b30b      	cbz	r3, 80034e8 <__sfp+0x68>
 80034a4:	6836      	ldr	r6, [r6, #0]
 80034a6:	e7f7      	b.n	8003498 <__sfp+0x18>
 80034a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034ac:	b9d5      	cbnz	r5, 80034e4 <__sfp+0x64>
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <__sfp+0x88>)
 80034b0:	60e3      	str	r3, [r4, #12]
 80034b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034b6:	6665      	str	r5, [r4, #100]	; 0x64
 80034b8:	f000 f847 	bl	800354a <__retarget_lock_init_recursive>
 80034bc:	f7ff ff96 	bl	80033ec <__sfp_lock_release>
 80034c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034c8:	6025      	str	r5, [r4, #0]
 80034ca:	61a5      	str	r5, [r4, #24]
 80034cc:	2208      	movs	r2, #8
 80034ce:	4629      	mov	r1, r5
 80034d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034d4:	f7ff fd2c 	bl	8002f30 <memset>
 80034d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034e0:	4620      	mov	r0, r4
 80034e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034e4:	3468      	adds	r4, #104	; 0x68
 80034e6:	e7d9      	b.n	800349c <__sfp+0x1c>
 80034e8:	2104      	movs	r1, #4
 80034ea:	4638      	mov	r0, r7
 80034ec:	f7ff ff62 	bl	80033b4 <__sfmoreglue>
 80034f0:	4604      	mov	r4, r0
 80034f2:	6030      	str	r0, [r6, #0]
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d1d5      	bne.n	80034a4 <__sfp+0x24>
 80034f8:	f7ff ff78 	bl	80033ec <__sfp_lock_release>
 80034fc:	230c      	movs	r3, #12
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	e7ee      	b.n	80034e0 <__sfp+0x60>
 8003502:	bf00      	nop
 8003504:	08003ff0 	.word	0x08003ff0
 8003508:	ffff0001 	.word	0xffff0001

0800350c <_fwalk_reent>:
 800350c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003510:	4606      	mov	r6, r0
 8003512:	4688      	mov	r8, r1
 8003514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003518:	2700      	movs	r7, #0
 800351a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800351e:	f1b9 0901 	subs.w	r9, r9, #1
 8003522:	d505      	bpl.n	8003530 <_fwalk_reent+0x24>
 8003524:	6824      	ldr	r4, [r4, #0]
 8003526:	2c00      	cmp	r4, #0
 8003528:	d1f7      	bne.n	800351a <_fwalk_reent+0xe>
 800352a:	4638      	mov	r0, r7
 800352c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003530:	89ab      	ldrh	r3, [r5, #12]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d907      	bls.n	8003546 <_fwalk_reent+0x3a>
 8003536:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800353a:	3301      	adds	r3, #1
 800353c:	d003      	beq.n	8003546 <_fwalk_reent+0x3a>
 800353e:	4629      	mov	r1, r5
 8003540:	4630      	mov	r0, r6
 8003542:	47c0      	blx	r8
 8003544:	4307      	orrs	r7, r0
 8003546:	3568      	adds	r5, #104	; 0x68
 8003548:	e7e9      	b.n	800351e <_fwalk_reent+0x12>

0800354a <__retarget_lock_init_recursive>:
 800354a:	4770      	bx	lr

0800354c <__retarget_lock_acquire_recursive>:
 800354c:	4770      	bx	lr

0800354e <__retarget_lock_release_recursive>:
 800354e:	4770      	bx	lr

08003550 <__swhatbuf_r>:
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	460e      	mov	r6, r1
 8003554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003558:	2900      	cmp	r1, #0
 800355a:	b096      	sub	sp, #88	; 0x58
 800355c:	4614      	mov	r4, r2
 800355e:	461d      	mov	r5, r3
 8003560:	da08      	bge.n	8003574 <__swhatbuf_r+0x24>
 8003562:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	602a      	str	r2, [r5, #0]
 800356a:	061a      	lsls	r2, r3, #24
 800356c:	d410      	bmi.n	8003590 <__swhatbuf_r+0x40>
 800356e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003572:	e00e      	b.n	8003592 <__swhatbuf_r+0x42>
 8003574:	466a      	mov	r2, sp
 8003576:	f000 fc95 	bl	8003ea4 <_fstat_r>
 800357a:	2800      	cmp	r0, #0
 800357c:	dbf1      	blt.n	8003562 <__swhatbuf_r+0x12>
 800357e:	9a01      	ldr	r2, [sp, #4]
 8003580:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003584:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003588:	425a      	negs	r2, r3
 800358a:	415a      	adcs	r2, r3
 800358c:	602a      	str	r2, [r5, #0]
 800358e:	e7ee      	b.n	800356e <__swhatbuf_r+0x1e>
 8003590:	2340      	movs	r3, #64	; 0x40
 8003592:	2000      	movs	r0, #0
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	b016      	add	sp, #88	; 0x58
 8003598:	bd70      	pop	{r4, r5, r6, pc}
	...

0800359c <__smakebuf_r>:
 800359c:	898b      	ldrh	r3, [r1, #12]
 800359e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035a0:	079d      	lsls	r5, r3, #30
 80035a2:	4606      	mov	r6, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	d507      	bpl.n	80035b8 <__smakebuf_r+0x1c>
 80035a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	6123      	str	r3, [r4, #16]
 80035b0:	2301      	movs	r3, #1
 80035b2:	6163      	str	r3, [r4, #20]
 80035b4:	b002      	add	sp, #8
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	ab01      	add	r3, sp, #4
 80035ba:	466a      	mov	r2, sp
 80035bc:	f7ff ffc8 	bl	8003550 <__swhatbuf_r>
 80035c0:	9900      	ldr	r1, [sp, #0]
 80035c2:	4605      	mov	r5, r0
 80035c4:	4630      	mov	r0, r6
 80035c6:	f000 f895 	bl	80036f4 <_malloc_r>
 80035ca:	b948      	cbnz	r0, 80035e0 <__smakebuf_r+0x44>
 80035cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d0:	059a      	lsls	r2, r3, #22
 80035d2:	d4ef      	bmi.n	80035b4 <__smakebuf_r+0x18>
 80035d4:	f023 0303 	bic.w	r3, r3, #3
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	81a3      	strh	r3, [r4, #12]
 80035de:	e7e3      	b.n	80035a8 <__smakebuf_r+0xc>
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <__smakebuf_r+0x7c>)
 80035e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80035e4:	89a3      	ldrh	r3, [r4, #12]
 80035e6:	6020      	str	r0, [r4, #0]
 80035e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	9b00      	ldr	r3, [sp, #0]
 80035f0:	6163      	str	r3, [r4, #20]
 80035f2:	9b01      	ldr	r3, [sp, #4]
 80035f4:	6120      	str	r0, [r4, #16]
 80035f6:	b15b      	cbz	r3, 8003610 <__smakebuf_r+0x74>
 80035f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035fc:	4630      	mov	r0, r6
 80035fe:	f000 fc63 	bl	8003ec8 <_isatty_r>
 8003602:	b128      	cbz	r0, 8003610 <__smakebuf_r+0x74>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	81a3      	strh	r3, [r4, #12]
 8003610:	89a0      	ldrh	r0, [r4, #12]
 8003612:	4305      	orrs	r5, r0
 8003614:	81a5      	strh	r5, [r4, #12]
 8003616:	e7cd      	b.n	80035b4 <__smakebuf_r+0x18>
 8003618:	080033a9 	.word	0x080033a9

0800361c <_free_r>:
 800361c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800361e:	2900      	cmp	r1, #0
 8003620:	d044      	beq.n	80036ac <_free_r+0x90>
 8003622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003626:	9001      	str	r0, [sp, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f1a1 0404 	sub.w	r4, r1, #4
 800362e:	bfb8      	it	lt
 8003630:	18e4      	addlt	r4, r4, r3
 8003632:	f000 fc6b 	bl	8003f0c <__malloc_lock>
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <_free_r+0x94>)
 8003638:	9801      	ldr	r0, [sp, #4]
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	b933      	cbnz	r3, 800364c <_free_r+0x30>
 800363e:	6063      	str	r3, [r4, #4]
 8003640:	6014      	str	r4, [r2, #0]
 8003642:	b003      	add	sp, #12
 8003644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003648:	f000 bc66 	b.w	8003f18 <__malloc_unlock>
 800364c:	42a3      	cmp	r3, r4
 800364e:	d908      	bls.n	8003662 <_free_r+0x46>
 8003650:	6825      	ldr	r5, [r4, #0]
 8003652:	1961      	adds	r1, r4, r5
 8003654:	428b      	cmp	r3, r1
 8003656:	bf01      	itttt	eq
 8003658:	6819      	ldreq	r1, [r3, #0]
 800365a:	685b      	ldreq	r3, [r3, #4]
 800365c:	1949      	addeq	r1, r1, r5
 800365e:	6021      	streq	r1, [r4, #0]
 8003660:	e7ed      	b.n	800363e <_free_r+0x22>
 8003662:	461a      	mov	r2, r3
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b10b      	cbz	r3, 800366c <_free_r+0x50>
 8003668:	42a3      	cmp	r3, r4
 800366a:	d9fa      	bls.n	8003662 <_free_r+0x46>
 800366c:	6811      	ldr	r1, [r2, #0]
 800366e:	1855      	adds	r5, r2, r1
 8003670:	42a5      	cmp	r5, r4
 8003672:	d10b      	bne.n	800368c <_free_r+0x70>
 8003674:	6824      	ldr	r4, [r4, #0]
 8003676:	4421      	add	r1, r4
 8003678:	1854      	adds	r4, r2, r1
 800367a:	42a3      	cmp	r3, r4
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	d1e0      	bne.n	8003642 <_free_r+0x26>
 8003680:	681c      	ldr	r4, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	6053      	str	r3, [r2, #4]
 8003686:	4421      	add	r1, r4
 8003688:	6011      	str	r1, [r2, #0]
 800368a:	e7da      	b.n	8003642 <_free_r+0x26>
 800368c:	d902      	bls.n	8003694 <_free_r+0x78>
 800368e:	230c      	movs	r3, #12
 8003690:	6003      	str	r3, [r0, #0]
 8003692:	e7d6      	b.n	8003642 <_free_r+0x26>
 8003694:	6825      	ldr	r5, [r4, #0]
 8003696:	1961      	adds	r1, r4, r5
 8003698:	428b      	cmp	r3, r1
 800369a:	bf04      	itt	eq
 800369c:	6819      	ldreq	r1, [r3, #0]
 800369e:	685b      	ldreq	r3, [r3, #4]
 80036a0:	6063      	str	r3, [r4, #4]
 80036a2:	bf04      	itt	eq
 80036a4:	1949      	addeq	r1, r1, r5
 80036a6:	6021      	streq	r1, [r4, #0]
 80036a8:	6054      	str	r4, [r2, #4]
 80036aa:	e7ca      	b.n	8003642 <_free_r+0x26>
 80036ac:	b003      	add	sp, #12
 80036ae:	bd30      	pop	{r4, r5, pc}
 80036b0:	20000130 	.word	0x20000130

080036b4 <sbrk_aligned>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	4e0e      	ldr	r6, [pc, #56]	; (80036f0 <sbrk_aligned+0x3c>)
 80036b8:	460c      	mov	r4, r1
 80036ba:	6831      	ldr	r1, [r6, #0]
 80036bc:	4605      	mov	r5, r0
 80036be:	b911      	cbnz	r1, 80036c6 <sbrk_aligned+0x12>
 80036c0:	f000 fb7a 	bl	8003db8 <_sbrk_r>
 80036c4:	6030      	str	r0, [r6, #0]
 80036c6:	4621      	mov	r1, r4
 80036c8:	4628      	mov	r0, r5
 80036ca:	f000 fb75 	bl	8003db8 <_sbrk_r>
 80036ce:	1c43      	adds	r3, r0, #1
 80036d0:	d00a      	beq.n	80036e8 <sbrk_aligned+0x34>
 80036d2:	1cc4      	adds	r4, r0, #3
 80036d4:	f024 0403 	bic.w	r4, r4, #3
 80036d8:	42a0      	cmp	r0, r4
 80036da:	d007      	beq.n	80036ec <sbrk_aligned+0x38>
 80036dc:	1a21      	subs	r1, r4, r0
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 fb6a 	bl	8003db8 <_sbrk_r>
 80036e4:	3001      	adds	r0, #1
 80036e6:	d101      	bne.n	80036ec <sbrk_aligned+0x38>
 80036e8:	f04f 34ff 	mov.w	r4, #4294967295
 80036ec:	4620      	mov	r0, r4
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	20000134 	.word	0x20000134

080036f4 <_malloc_r>:
 80036f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f8:	1ccd      	adds	r5, r1, #3
 80036fa:	f025 0503 	bic.w	r5, r5, #3
 80036fe:	3508      	adds	r5, #8
 8003700:	2d0c      	cmp	r5, #12
 8003702:	bf38      	it	cc
 8003704:	250c      	movcc	r5, #12
 8003706:	2d00      	cmp	r5, #0
 8003708:	4607      	mov	r7, r0
 800370a:	db01      	blt.n	8003710 <_malloc_r+0x1c>
 800370c:	42a9      	cmp	r1, r5
 800370e:	d905      	bls.n	800371c <_malloc_r+0x28>
 8003710:	230c      	movs	r3, #12
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	2600      	movs	r6, #0
 8003716:	4630      	mov	r0, r6
 8003718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800371c:	4e2e      	ldr	r6, [pc, #184]	; (80037d8 <_malloc_r+0xe4>)
 800371e:	f000 fbf5 	bl	8003f0c <__malloc_lock>
 8003722:	6833      	ldr	r3, [r6, #0]
 8003724:	461c      	mov	r4, r3
 8003726:	bb34      	cbnz	r4, 8003776 <_malloc_r+0x82>
 8003728:	4629      	mov	r1, r5
 800372a:	4638      	mov	r0, r7
 800372c:	f7ff ffc2 	bl	80036b4 <sbrk_aligned>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	4604      	mov	r4, r0
 8003734:	d14d      	bne.n	80037d2 <_malloc_r+0xde>
 8003736:	6834      	ldr	r4, [r6, #0]
 8003738:	4626      	mov	r6, r4
 800373a:	2e00      	cmp	r6, #0
 800373c:	d140      	bne.n	80037c0 <_malloc_r+0xcc>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	4631      	mov	r1, r6
 8003742:	4638      	mov	r0, r7
 8003744:	eb04 0803 	add.w	r8, r4, r3
 8003748:	f000 fb36 	bl	8003db8 <_sbrk_r>
 800374c:	4580      	cmp	r8, r0
 800374e:	d13a      	bne.n	80037c6 <_malloc_r+0xd2>
 8003750:	6821      	ldr	r1, [r4, #0]
 8003752:	3503      	adds	r5, #3
 8003754:	1a6d      	subs	r5, r5, r1
 8003756:	f025 0503 	bic.w	r5, r5, #3
 800375a:	3508      	adds	r5, #8
 800375c:	2d0c      	cmp	r5, #12
 800375e:	bf38      	it	cc
 8003760:	250c      	movcc	r5, #12
 8003762:	4629      	mov	r1, r5
 8003764:	4638      	mov	r0, r7
 8003766:	f7ff ffa5 	bl	80036b4 <sbrk_aligned>
 800376a:	3001      	adds	r0, #1
 800376c:	d02b      	beq.n	80037c6 <_malloc_r+0xd2>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	442b      	add	r3, r5
 8003772:	6023      	str	r3, [r4, #0]
 8003774:	e00e      	b.n	8003794 <_malloc_r+0xa0>
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	1b52      	subs	r2, r2, r5
 800377a:	d41e      	bmi.n	80037ba <_malloc_r+0xc6>
 800377c:	2a0b      	cmp	r2, #11
 800377e:	d916      	bls.n	80037ae <_malloc_r+0xba>
 8003780:	1961      	adds	r1, r4, r5
 8003782:	42a3      	cmp	r3, r4
 8003784:	6025      	str	r5, [r4, #0]
 8003786:	bf18      	it	ne
 8003788:	6059      	strne	r1, [r3, #4]
 800378a:	6863      	ldr	r3, [r4, #4]
 800378c:	bf08      	it	eq
 800378e:	6031      	streq	r1, [r6, #0]
 8003790:	5162      	str	r2, [r4, r5]
 8003792:	604b      	str	r3, [r1, #4]
 8003794:	4638      	mov	r0, r7
 8003796:	f104 060b 	add.w	r6, r4, #11
 800379a:	f000 fbbd 	bl	8003f18 <__malloc_unlock>
 800379e:	f026 0607 	bic.w	r6, r6, #7
 80037a2:	1d23      	adds	r3, r4, #4
 80037a4:	1af2      	subs	r2, r6, r3
 80037a6:	d0b6      	beq.n	8003716 <_malloc_r+0x22>
 80037a8:	1b9b      	subs	r3, r3, r6
 80037aa:	50a3      	str	r3, [r4, r2]
 80037ac:	e7b3      	b.n	8003716 <_malloc_r+0x22>
 80037ae:	6862      	ldr	r2, [r4, #4]
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	bf0c      	ite	eq
 80037b4:	6032      	streq	r2, [r6, #0]
 80037b6:	605a      	strne	r2, [r3, #4]
 80037b8:	e7ec      	b.n	8003794 <_malloc_r+0xa0>
 80037ba:	4623      	mov	r3, r4
 80037bc:	6864      	ldr	r4, [r4, #4]
 80037be:	e7b2      	b.n	8003726 <_malloc_r+0x32>
 80037c0:	4634      	mov	r4, r6
 80037c2:	6876      	ldr	r6, [r6, #4]
 80037c4:	e7b9      	b.n	800373a <_malloc_r+0x46>
 80037c6:	230c      	movs	r3, #12
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	4638      	mov	r0, r7
 80037cc:	f000 fba4 	bl	8003f18 <__malloc_unlock>
 80037d0:	e7a1      	b.n	8003716 <_malloc_r+0x22>
 80037d2:	6025      	str	r5, [r4, #0]
 80037d4:	e7de      	b.n	8003794 <_malloc_r+0xa0>
 80037d6:	bf00      	nop
 80037d8:	20000130 	.word	0x20000130

080037dc <__sfputc_r>:
 80037dc:	6893      	ldr	r3, [r2, #8]
 80037de:	3b01      	subs	r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	b410      	push	{r4}
 80037e4:	6093      	str	r3, [r2, #8]
 80037e6:	da08      	bge.n	80037fa <__sfputc_r+0x1e>
 80037e8:	6994      	ldr	r4, [r2, #24]
 80037ea:	42a3      	cmp	r3, r4
 80037ec:	db01      	blt.n	80037f2 <__sfputc_r+0x16>
 80037ee:	290a      	cmp	r1, #10
 80037f0:	d103      	bne.n	80037fa <__sfputc_r+0x1e>
 80037f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037f6:	f7ff bc31 	b.w	800305c <__swbuf_r>
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	1c58      	adds	r0, r3, #1
 80037fe:	6010      	str	r0, [r2, #0]
 8003800:	7019      	strb	r1, [r3, #0]
 8003802:	4608      	mov	r0, r1
 8003804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003808:	4770      	bx	lr

0800380a <__sfputs_r>:
 800380a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380c:	4606      	mov	r6, r0
 800380e:	460f      	mov	r7, r1
 8003810:	4614      	mov	r4, r2
 8003812:	18d5      	adds	r5, r2, r3
 8003814:	42ac      	cmp	r4, r5
 8003816:	d101      	bne.n	800381c <__sfputs_r+0x12>
 8003818:	2000      	movs	r0, #0
 800381a:	e007      	b.n	800382c <__sfputs_r+0x22>
 800381c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003820:	463a      	mov	r2, r7
 8003822:	4630      	mov	r0, r6
 8003824:	f7ff ffda 	bl	80037dc <__sfputc_r>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	d1f3      	bne.n	8003814 <__sfputs_r+0xa>
 800382c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003830 <_vfiprintf_r>:
 8003830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	460d      	mov	r5, r1
 8003836:	b09d      	sub	sp, #116	; 0x74
 8003838:	4614      	mov	r4, r2
 800383a:	4698      	mov	r8, r3
 800383c:	4606      	mov	r6, r0
 800383e:	b118      	cbz	r0, 8003848 <_vfiprintf_r+0x18>
 8003840:	6983      	ldr	r3, [r0, #24]
 8003842:	b90b      	cbnz	r3, 8003848 <_vfiprintf_r+0x18>
 8003844:	f7ff fde4 	bl	8003410 <__sinit>
 8003848:	4b89      	ldr	r3, [pc, #548]	; (8003a70 <_vfiprintf_r+0x240>)
 800384a:	429d      	cmp	r5, r3
 800384c:	d11b      	bne.n	8003886 <_vfiprintf_r+0x56>
 800384e:	6875      	ldr	r5, [r6, #4]
 8003850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003852:	07d9      	lsls	r1, r3, #31
 8003854:	d405      	bmi.n	8003862 <_vfiprintf_r+0x32>
 8003856:	89ab      	ldrh	r3, [r5, #12]
 8003858:	059a      	lsls	r2, r3, #22
 800385a:	d402      	bmi.n	8003862 <_vfiprintf_r+0x32>
 800385c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800385e:	f7ff fe75 	bl	800354c <__retarget_lock_acquire_recursive>
 8003862:	89ab      	ldrh	r3, [r5, #12]
 8003864:	071b      	lsls	r3, r3, #28
 8003866:	d501      	bpl.n	800386c <_vfiprintf_r+0x3c>
 8003868:	692b      	ldr	r3, [r5, #16]
 800386a:	b9eb      	cbnz	r3, 80038a8 <_vfiprintf_r+0x78>
 800386c:	4629      	mov	r1, r5
 800386e:	4630      	mov	r0, r6
 8003870:	f7ff fc46 	bl	8003100 <__swsetup_r>
 8003874:	b1c0      	cbz	r0, 80038a8 <_vfiprintf_r+0x78>
 8003876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003878:	07dc      	lsls	r4, r3, #31
 800387a:	d50e      	bpl.n	800389a <_vfiprintf_r+0x6a>
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	b01d      	add	sp, #116	; 0x74
 8003882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003886:	4b7b      	ldr	r3, [pc, #492]	; (8003a74 <_vfiprintf_r+0x244>)
 8003888:	429d      	cmp	r5, r3
 800388a:	d101      	bne.n	8003890 <_vfiprintf_r+0x60>
 800388c:	68b5      	ldr	r5, [r6, #8]
 800388e:	e7df      	b.n	8003850 <_vfiprintf_r+0x20>
 8003890:	4b79      	ldr	r3, [pc, #484]	; (8003a78 <_vfiprintf_r+0x248>)
 8003892:	429d      	cmp	r5, r3
 8003894:	bf08      	it	eq
 8003896:	68f5      	ldreq	r5, [r6, #12]
 8003898:	e7da      	b.n	8003850 <_vfiprintf_r+0x20>
 800389a:	89ab      	ldrh	r3, [r5, #12]
 800389c:	0598      	lsls	r0, r3, #22
 800389e:	d4ed      	bmi.n	800387c <_vfiprintf_r+0x4c>
 80038a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038a2:	f7ff fe54 	bl	800354e <__retarget_lock_release_recursive>
 80038a6:	e7e9      	b.n	800387c <_vfiprintf_r+0x4c>
 80038a8:	2300      	movs	r3, #0
 80038aa:	9309      	str	r3, [sp, #36]	; 0x24
 80038ac:	2320      	movs	r3, #32
 80038ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80038b6:	2330      	movs	r3, #48	; 0x30
 80038b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003a7c <_vfiprintf_r+0x24c>
 80038bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038c0:	f04f 0901 	mov.w	r9, #1
 80038c4:	4623      	mov	r3, r4
 80038c6:	469a      	mov	sl, r3
 80038c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038cc:	b10a      	cbz	r2, 80038d2 <_vfiprintf_r+0xa2>
 80038ce:	2a25      	cmp	r2, #37	; 0x25
 80038d0:	d1f9      	bne.n	80038c6 <_vfiprintf_r+0x96>
 80038d2:	ebba 0b04 	subs.w	fp, sl, r4
 80038d6:	d00b      	beq.n	80038f0 <_vfiprintf_r+0xc0>
 80038d8:	465b      	mov	r3, fp
 80038da:	4622      	mov	r2, r4
 80038dc:	4629      	mov	r1, r5
 80038de:	4630      	mov	r0, r6
 80038e0:	f7ff ff93 	bl	800380a <__sfputs_r>
 80038e4:	3001      	adds	r0, #1
 80038e6:	f000 80aa 	beq.w	8003a3e <_vfiprintf_r+0x20e>
 80038ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038ec:	445a      	add	r2, fp
 80038ee:	9209      	str	r2, [sp, #36]	; 0x24
 80038f0:	f89a 3000 	ldrb.w	r3, [sl]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a2 	beq.w	8003a3e <_vfiprintf_r+0x20e>
 80038fa:	2300      	movs	r3, #0
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003904:	f10a 0a01 	add.w	sl, sl, #1
 8003908:	9304      	str	r3, [sp, #16]
 800390a:	9307      	str	r3, [sp, #28]
 800390c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003910:	931a      	str	r3, [sp, #104]	; 0x68
 8003912:	4654      	mov	r4, sl
 8003914:	2205      	movs	r2, #5
 8003916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800391a:	4858      	ldr	r0, [pc, #352]	; (8003a7c <_vfiprintf_r+0x24c>)
 800391c:	f7fc fc68 	bl	80001f0 <memchr>
 8003920:	9a04      	ldr	r2, [sp, #16]
 8003922:	b9d8      	cbnz	r0, 800395c <_vfiprintf_r+0x12c>
 8003924:	06d1      	lsls	r1, r2, #27
 8003926:	bf44      	itt	mi
 8003928:	2320      	movmi	r3, #32
 800392a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800392e:	0713      	lsls	r3, r2, #28
 8003930:	bf44      	itt	mi
 8003932:	232b      	movmi	r3, #43	; 0x2b
 8003934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003938:	f89a 3000 	ldrb.w	r3, [sl]
 800393c:	2b2a      	cmp	r3, #42	; 0x2a
 800393e:	d015      	beq.n	800396c <_vfiprintf_r+0x13c>
 8003940:	9a07      	ldr	r2, [sp, #28]
 8003942:	4654      	mov	r4, sl
 8003944:	2000      	movs	r0, #0
 8003946:	f04f 0c0a 	mov.w	ip, #10
 800394a:	4621      	mov	r1, r4
 800394c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003950:	3b30      	subs	r3, #48	; 0x30
 8003952:	2b09      	cmp	r3, #9
 8003954:	d94e      	bls.n	80039f4 <_vfiprintf_r+0x1c4>
 8003956:	b1b0      	cbz	r0, 8003986 <_vfiprintf_r+0x156>
 8003958:	9207      	str	r2, [sp, #28]
 800395a:	e014      	b.n	8003986 <_vfiprintf_r+0x156>
 800395c:	eba0 0308 	sub.w	r3, r0, r8
 8003960:	fa09 f303 	lsl.w	r3, r9, r3
 8003964:	4313      	orrs	r3, r2
 8003966:	9304      	str	r3, [sp, #16]
 8003968:	46a2      	mov	sl, r4
 800396a:	e7d2      	b.n	8003912 <_vfiprintf_r+0xe2>
 800396c:	9b03      	ldr	r3, [sp, #12]
 800396e:	1d19      	adds	r1, r3, #4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	9103      	str	r1, [sp, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	bfbb      	ittet	lt
 8003978:	425b      	neglt	r3, r3
 800397a:	f042 0202 	orrlt.w	r2, r2, #2
 800397e:	9307      	strge	r3, [sp, #28]
 8003980:	9307      	strlt	r3, [sp, #28]
 8003982:	bfb8      	it	lt
 8003984:	9204      	strlt	r2, [sp, #16]
 8003986:	7823      	ldrb	r3, [r4, #0]
 8003988:	2b2e      	cmp	r3, #46	; 0x2e
 800398a:	d10c      	bne.n	80039a6 <_vfiprintf_r+0x176>
 800398c:	7863      	ldrb	r3, [r4, #1]
 800398e:	2b2a      	cmp	r3, #42	; 0x2a
 8003990:	d135      	bne.n	80039fe <_vfiprintf_r+0x1ce>
 8003992:	9b03      	ldr	r3, [sp, #12]
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	9203      	str	r2, [sp, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	bfb8      	it	lt
 800399e:	f04f 33ff 	movlt.w	r3, #4294967295
 80039a2:	3402      	adds	r4, #2
 80039a4:	9305      	str	r3, [sp, #20]
 80039a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a8c <_vfiprintf_r+0x25c>
 80039aa:	7821      	ldrb	r1, [r4, #0]
 80039ac:	2203      	movs	r2, #3
 80039ae:	4650      	mov	r0, sl
 80039b0:	f7fc fc1e 	bl	80001f0 <memchr>
 80039b4:	b140      	cbz	r0, 80039c8 <_vfiprintf_r+0x198>
 80039b6:	2340      	movs	r3, #64	; 0x40
 80039b8:	eba0 000a 	sub.w	r0, r0, sl
 80039bc:	fa03 f000 	lsl.w	r0, r3, r0
 80039c0:	9b04      	ldr	r3, [sp, #16]
 80039c2:	4303      	orrs	r3, r0
 80039c4:	3401      	adds	r4, #1
 80039c6:	9304      	str	r3, [sp, #16]
 80039c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039cc:	482c      	ldr	r0, [pc, #176]	; (8003a80 <_vfiprintf_r+0x250>)
 80039ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039d2:	2206      	movs	r2, #6
 80039d4:	f7fc fc0c 	bl	80001f0 <memchr>
 80039d8:	2800      	cmp	r0, #0
 80039da:	d03f      	beq.n	8003a5c <_vfiprintf_r+0x22c>
 80039dc:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <_vfiprintf_r+0x254>)
 80039de:	bb1b      	cbnz	r3, 8003a28 <_vfiprintf_r+0x1f8>
 80039e0:	9b03      	ldr	r3, [sp, #12]
 80039e2:	3307      	adds	r3, #7
 80039e4:	f023 0307 	bic.w	r3, r3, #7
 80039e8:	3308      	adds	r3, #8
 80039ea:	9303      	str	r3, [sp, #12]
 80039ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ee:	443b      	add	r3, r7
 80039f0:	9309      	str	r3, [sp, #36]	; 0x24
 80039f2:	e767      	b.n	80038c4 <_vfiprintf_r+0x94>
 80039f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80039f8:	460c      	mov	r4, r1
 80039fa:	2001      	movs	r0, #1
 80039fc:	e7a5      	b.n	800394a <_vfiprintf_r+0x11a>
 80039fe:	2300      	movs	r3, #0
 8003a00:	3401      	adds	r4, #1
 8003a02:	9305      	str	r3, [sp, #20]
 8003a04:	4619      	mov	r1, r3
 8003a06:	f04f 0c0a 	mov.w	ip, #10
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a10:	3a30      	subs	r2, #48	; 0x30
 8003a12:	2a09      	cmp	r2, #9
 8003a14:	d903      	bls.n	8003a1e <_vfiprintf_r+0x1ee>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0c5      	beq.n	80039a6 <_vfiprintf_r+0x176>
 8003a1a:	9105      	str	r1, [sp, #20]
 8003a1c:	e7c3      	b.n	80039a6 <_vfiprintf_r+0x176>
 8003a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a22:	4604      	mov	r4, r0
 8003a24:	2301      	movs	r3, #1
 8003a26:	e7f0      	b.n	8003a0a <_vfiprintf_r+0x1da>
 8003a28:	ab03      	add	r3, sp, #12
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	462a      	mov	r2, r5
 8003a2e:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <_vfiprintf_r+0x258>)
 8003a30:	a904      	add	r1, sp, #16
 8003a32:	4630      	mov	r0, r6
 8003a34:	f3af 8000 	nop.w
 8003a38:	4607      	mov	r7, r0
 8003a3a:	1c78      	adds	r0, r7, #1
 8003a3c:	d1d6      	bne.n	80039ec <_vfiprintf_r+0x1bc>
 8003a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a40:	07d9      	lsls	r1, r3, #31
 8003a42:	d405      	bmi.n	8003a50 <_vfiprintf_r+0x220>
 8003a44:	89ab      	ldrh	r3, [r5, #12]
 8003a46:	059a      	lsls	r2, r3, #22
 8003a48:	d402      	bmi.n	8003a50 <_vfiprintf_r+0x220>
 8003a4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a4c:	f7ff fd7f 	bl	800354e <__retarget_lock_release_recursive>
 8003a50:	89ab      	ldrh	r3, [r5, #12]
 8003a52:	065b      	lsls	r3, r3, #25
 8003a54:	f53f af12 	bmi.w	800387c <_vfiprintf_r+0x4c>
 8003a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a5a:	e711      	b.n	8003880 <_vfiprintf_r+0x50>
 8003a5c:	ab03      	add	r3, sp, #12
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	462a      	mov	r2, r5
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <_vfiprintf_r+0x258>)
 8003a64:	a904      	add	r1, sp, #16
 8003a66:	4630      	mov	r0, r6
 8003a68:	f000 f880 	bl	8003b6c <_printf_i>
 8003a6c:	e7e4      	b.n	8003a38 <_vfiprintf_r+0x208>
 8003a6e:	bf00      	nop
 8003a70:	08004014 	.word	0x08004014
 8003a74:	08004034 	.word	0x08004034
 8003a78:	08003ff4 	.word	0x08003ff4
 8003a7c:	08004054 	.word	0x08004054
 8003a80:	0800405e 	.word	0x0800405e
 8003a84:	00000000 	.word	0x00000000
 8003a88:	0800380b 	.word	0x0800380b
 8003a8c:	0800405a 	.word	0x0800405a

08003a90 <_printf_common>:
 8003a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a94:	4616      	mov	r6, r2
 8003a96:	4699      	mov	r9, r3
 8003a98:	688a      	ldr	r2, [r1, #8]
 8003a9a:	690b      	ldr	r3, [r1, #16]
 8003a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	bfb8      	it	lt
 8003aa4:	4613      	movlt	r3, r2
 8003aa6:	6033      	str	r3, [r6, #0]
 8003aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aac:	4607      	mov	r7, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	b10a      	cbz	r2, 8003ab6 <_printf_common+0x26>
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	6033      	str	r3, [r6, #0]
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	0699      	lsls	r1, r3, #26
 8003aba:	bf42      	ittt	mi
 8003abc:	6833      	ldrmi	r3, [r6, #0]
 8003abe:	3302      	addmi	r3, #2
 8003ac0:	6033      	strmi	r3, [r6, #0]
 8003ac2:	6825      	ldr	r5, [r4, #0]
 8003ac4:	f015 0506 	ands.w	r5, r5, #6
 8003ac8:	d106      	bne.n	8003ad8 <_printf_common+0x48>
 8003aca:	f104 0a19 	add.w	sl, r4, #25
 8003ace:	68e3      	ldr	r3, [r4, #12]
 8003ad0:	6832      	ldr	r2, [r6, #0]
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	42ab      	cmp	r3, r5
 8003ad6:	dc26      	bgt.n	8003b26 <_printf_common+0x96>
 8003ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003adc:	1e13      	subs	r3, r2, #0
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	bf18      	it	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	0692      	lsls	r2, r2, #26
 8003ae6:	d42b      	bmi.n	8003b40 <_printf_common+0xb0>
 8003ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aec:	4649      	mov	r1, r9
 8003aee:	4638      	mov	r0, r7
 8003af0:	47c0      	blx	r8
 8003af2:	3001      	adds	r0, #1
 8003af4:	d01e      	beq.n	8003b34 <_printf_common+0xa4>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	68e5      	ldr	r5, [r4, #12]
 8003afa:	6832      	ldr	r2, [r6, #0]
 8003afc:	f003 0306 	and.w	r3, r3, #6
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	bf08      	it	eq
 8003b04:	1aad      	subeq	r5, r5, r2
 8003b06:	68a3      	ldr	r3, [r4, #8]
 8003b08:	6922      	ldr	r2, [r4, #16]
 8003b0a:	bf0c      	ite	eq
 8003b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b10:	2500      	movne	r5, #0
 8003b12:	4293      	cmp	r3, r2
 8003b14:	bfc4      	itt	gt
 8003b16:	1a9b      	subgt	r3, r3, r2
 8003b18:	18ed      	addgt	r5, r5, r3
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	341a      	adds	r4, #26
 8003b1e:	42b5      	cmp	r5, r6
 8003b20:	d11a      	bne.n	8003b58 <_printf_common+0xc8>
 8003b22:	2000      	movs	r0, #0
 8003b24:	e008      	b.n	8003b38 <_printf_common+0xa8>
 8003b26:	2301      	movs	r3, #1
 8003b28:	4652      	mov	r2, sl
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	47c0      	blx	r8
 8003b30:	3001      	adds	r0, #1
 8003b32:	d103      	bne.n	8003b3c <_printf_common+0xac>
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3c:	3501      	adds	r5, #1
 8003b3e:	e7c6      	b.n	8003ace <_printf_common+0x3e>
 8003b40:	18e1      	adds	r1, r4, r3
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	2030      	movs	r0, #48	; 0x30
 8003b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b4a:	4422      	add	r2, r4
 8003b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b54:	3302      	adds	r3, #2
 8003b56:	e7c7      	b.n	8003ae8 <_printf_common+0x58>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	4638      	mov	r0, r7
 8003b60:	47c0      	blx	r8
 8003b62:	3001      	adds	r0, #1
 8003b64:	d0e6      	beq.n	8003b34 <_printf_common+0xa4>
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7d9      	b.n	8003b1e <_printf_common+0x8e>
	...

08003b6c <_printf_i>:
 8003b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b70:	7e0f      	ldrb	r7, [r1, #24]
 8003b72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b74:	2f78      	cmp	r7, #120	; 0x78
 8003b76:	4691      	mov	r9, r2
 8003b78:	4680      	mov	r8, r0
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	469a      	mov	sl, r3
 8003b7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b82:	d807      	bhi.n	8003b94 <_printf_i+0x28>
 8003b84:	2f62      	cmp	r7, #98	; 0x62
 8003b86:	d80a      	bhi.n	8003b9e <_printf_i+0x32>
 8003b88:	2f00      	cmp	r7, #0
 8003b8a:	f000 80d8 	beq.w	8003d3e <_printf_i+0x1d2>
 8003b8e:	2f58      	cmp	r7, #88	; 0x58
 8003b90:	f000 80a3 	beq.w	8003cda <_printf_i+0x16e>
 8003b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b9c:	e03a      	b.n	8003c14 <_printf_i+0xa8>
 8003b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ba2:	2b15      	cmp	r3, #21
 8003ba4:	d8f6      	bhi.n	8003b94 <_printf_i+0x28>
 8003ba6:	a101      	add	r1, pc, #4	; (adr r1, 8003bac <_printf_i+0x40>)
 8003ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bac:	08003c05 	.word	0x08003c05
 8003bb0:	08003c19 	.word	0x08003c19
 8003bb4:	08003b95 	.word	0x08003b95
 8003bb8:	08003b95 	.word	0x08003b95
 8003bbc:	08003b95 	.word	0x08003b95
 8003bc0:	08003b95 	.word	0x08003b95
 8003bc4:	08003c19 	.word	0x08003c19
 8003bc8:	08003b95 	.word	0x08003b95
 8003bcc:	08003b95 	.word	0x08003b95
 8003bd0:	08003b95 	.word	0x08003b95
 8003bd4:	08003b95 	.word	0x08003b95
 8003bd8:	08003d25 	.word	0x08003d25
 8003bdc:	08003c49 	.word	0x08003c49
 8003be0:	08003d07 	.word	0x08003d07
 8003be4:	08003b95 	.word	0x08003b95
 8003be8:	08003b95 	.word	0x08003b95
 8003bec:	08003d47 	.word	0x08003d47
 8003bf0:	08003b95 	.word	0x08003b95
 8003bf4:	08003c49 	.word	0x08003c49
 8003bf8:	08003b95 	.word	0x08003b95
 8003bfc:	08003b95 	.word	0x08003b95
 8003c00:	08003d0f 	.word	0x08003d0f
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	1d1a      	adds	r2, r3, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	602a      	str	r2, [r5, #0]
 8003c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0a3      	b.n	8003d60 <_printf_i+0x1f4>
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	6829      	ldr	r1, [r5, #0]
 8003c1c:	0606      	lsls	r6, r0, #24
 8003c1e:	f101 0304 	add.w	r3, r1, #4
 8003c22:	d50a      	bpl.n	8003c3a <_printf_i+0xce>
 8003c24:	680e      	ldr	r6, [r1, #0]
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	2e00      	cmp	r6, #0
 8003c2a:	da03      	bge.n	8003c34 <_printf_i+0xc8>
 8003c2c:	232d      	movs	r3, #45	; 0x2d
 8003c2e:	4276      	negs	r6, r6
 8003c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c34:	485e      	ldr	r0, [pc, #376]	; (8003db0 <_printf_i+0x244>)
 8003c36:	230a      	movs	r3, #10
 8003c38:	e019      	b.n	8003c6e <_printf_i+0x102>
 8003c3a:	680e      	ldr	r6, [r1, #0]
 8003c3c:	602b      	str	r3, [r5, #0]
 8003c3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c42:	bf18      	it	ne
 8003c44:	b236      	sxthne	r6, r6
 8003c46:	e7ef      	b.n	8003c28 <_printf_i+0xbc>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	6820      	ldr	r0, [r4, #0]
 8003c4c:	1d19      	adds	r1, r3, #4
 8003c4e:	6029      	str	r1, [r5, #0]
 8003c50:	0601      	lsls	r1, r0, #24
 8003c52:	d501      	bpl.n	8003c58 <_printf_i+0xec>
 8003c54:	681e      	ldr	r6, [r3, #0]
 8003c56:	e002      	b.n	8003c5e <_printf_i+0xf2>
 8003c58:	0646      	lsls	r6, r0, #25
 8003c5a:	d5fb      	bpl.n	8003c54 <_printf_i+0xe8>
 8003c5c:	881e      	ldrh	r6, [r3, #0]
 8003c5e:	4854      	ldr	r0, [pc, #336]	; (8003db0 <_printf_i+0x244>)
 8003c60:	2f6f      	cmp	r7, #111	; 0x6f
 8003c62:	bf0c      	ite	eq
 8003c64:	2308      	moveq	r3, #8
 8003c66:	230a      	movne	r3, #10
 8003c68:	2100      	movs	r1, #0
 8003c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c6e:	6865      	ldr	r5, [r4, #4]
 8003c70:	60a5      	str	r5, [r4, #8]
 8003c72:	2d00      	cmp	r5, #0
 8003c74:	bfa2      	ittt	ge
 8003c76:	6821      	ldrge	r1, [r4, #0]
 8003c78:	f021 0104 	bicge.w	r1, r1, #4
 8003c7c:	6021      	strge	r1, [r4, #0]
 8003c7e:	b90e      	cbnz	r6, 8003c84 <_printf_i+0x118>
 8003c80:	2d00      	cmp	r5, #0
 8003c82:	d04d      	beq.n	8003d20 <_printf_i+0x1b4>
 8003c84:	4615      	mov	r5, r2
 8003c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8003c8e:	5dc7      	ldrb	r7, [r0, r7]
 8003c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c94:	4637      	mov	r7, r6
 8003c96:	42bb      	cmp	r3, r7
 8003c98:	460e      	mov	r6, r1
 8003c9a:	d9f4      	bls.n	8003c86 <_printf_i+0x11a>
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d10b      	bne.n	8003cb8 <_printf_i+0x14c>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	07de      	lsls	r6, r3, #31
 8003ca4:	d508      	bpl.n	8003cb8 <_printf_i+0x14c>
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	6861      	ldr	r1, [r4, #4]
 8003caa:	4299      	cmp	r1, r3
 8003cac:	bfde      	ittt	le
 8003cae:	2330      	movle	r3, #48	; 0x30
 8003cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cb8:	1b52      	subs	r2, r2, r5
 8003cba:	6122      	str	r2, [r4, #16]
 8003cbc:	f8cd a000 	str.w	sl, [sp]
 8003cc0:	464b      	mov	r3, r9
 8003cc2:	aa03      	add	r2, sp, #12
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	f7ff fee2 	bl	8003a90 <_printf_common>
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d14c      	bne.n	8003d6a <_printf_i+0x1fe>
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	b004      	add	sp, #16
 8003cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cda:	4835      	ldr	r0, [pc, #212]	; (8003db0 <_printf_i+0x244>)
 8003cdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ce0:	6829      	ldr	r1, [r5, #0]
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ce8:	6029      	str	r1, [r5, #0]
 8003cea:	061d      	lsls	r5, r3, #24
 8003cec:	d514      	bpl.n	8003d18 <_printf_i+0x1ac>
 8003cee:	07df      	lsls	r7, r3, #31
 8003cf0:	bf44      	itt	mi
 8003cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8003cf6:	6023      	strmi	r3, [r4, #0]
 8003cf8:	b91e      	cbnz	r6, 8003d02 <_printf_i+0x196>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	f023 0320 	bic.w	r3, r3, #32
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	2310      	movs	r3, #16
 8003d04:	e7b0      	b.n	8003c68 <_printf_i+0xfc>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	f043 0320 	orr.w	r3, r3, #32
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	2378      	movs	r3, #120	; 0x78
 8003d10:	4828      	ldr	r0, [pc, #160]	; (8003db4 <_printf_i+0x248>)
 8003d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d16:	e7e3      	b.n	8003ce0 <_printf_i+0x174>
 8003d18:	0659      	lsls	r1, r3, #25
 8003d1a:	bf48      	it	mi
 8003d1c:	b2b6      	uxthmi	r6, r6
 8003d1e:	e7e6      	b.n	8003cee <_printf_i+0x182>
 8003d20:	4615      	mov	r5, r2
 8003d22:	e7bb      	b.n	8003c9c <_printf_i+0x130>
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	6826      	ldr	r6, [r4, #0]
 8003d28:	6961      	ldr	r1, [r4, #20]
 8003d2a:	1d18      	adds	r0, r3, #4
 8003d2c:	6028      	str	r0, [r5, #0]
 8003d2e:	0635      	lsls	r5, r6, #24
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	d501      	bpl.n	8003d38 <_printf_i+0x1cc>
 8003d34:	6019      	str	r1, [r3, #0]
 8003d36:	e002      	b.n	8003d3e <_printf_i+0x1d2>
 8003d38:	0670      	lsls	r0, r6, #25
 8003d3a:	d5fb      	bpl.n	8003d34 <_printf_i+0x1c8>
 8003d3c:	8019      	strh	r1, [r3, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	6123      	str	r3, [r4, #16]
 8003d42:	4615      	mov	r5, r2
 8003d44:	e7ba      	b.n	8003cbc <_printf_i+0x150>
 8003d46:	682b      	ldr	r3, [r5, #0]
 8003d48:	1d1a      	adds	r2, r3, #4
 8003d4a:	602a      	str	r2, [r5, #0]
 8003d4c:	681d      	ldr	r5, [r3, #0]
 8003d4e:	6862      	ldr	r2, [r4, #4]
 8003d50:	2100      	movs	r1, #0
 8003d52:	4628      	mov	r0, r5
 8003d54:	f7fc fa4c 	bl	80001f0 <memchr>
 8003d58:	b108      	cbz	r0, 8003d5e <_printf_i+0x1f2>
 8003d5a:	1b40      	subs	r0, r0, r5
 8003d5c:	6060      	str	r0, [r4, #4]
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	6123      	str	r3, [r4, #16]
 8003d62:	2300      	movs	r3, #0
 8003d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d68:	e7a8      	b.n	8003cbc <_printf_i+0x150>
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	4649      	mov	r1, r9
 8003d70:	4640      	mov	r0, r8
 8003d72:	47d0      	blx	sl
 8003d74:	3001      	adds	r0, #1
 8003d76:	d0ab      	beq.n	8003cd0 <_printf_i+0x164>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	079b      	lsls	r3, r3, #30
 8003d7c:	d413      	bmi.n	8003da6 <_printf_i+0x23a>
 8003d7e:	68e0      	ldr	r0, [r4, #12]
 8003d80:	9b03      	ldr	r3, [sp, #12]
 8003d82:	4298      	cmp	r0, r3
 8003d84:	bfb8      	it	lt
 8003d86:	4618      	movlt	r0, r3
 8003d88:	e7a4      	b.n	8003cd4 <_printf_i+0x168>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4632      	mov	r2, r6
 8003d8e:	4649      	mov	r1, r9
 8003d90:	4640      	mov	r0, r8
 8003d92:	47d0      	blx	sl
 8003d94:	3001      	adds	r0, #1
 8003d96:	d09b      	beq.n	8003cd0 <_printf_i+0x164>
 8003d98:	3501      	adds	r5, #1
 8003d9a:	68e3      	ldr	r3, [r4, #12]
 8003d9c:	9903      	ldr	r1, [sp, #12]
 8003d9e:	1a5b      	subs	r3, r3, r1
 8003da0:	42ab      	cmp	r3, r5
 8003da2:	dcf2      	bgt.n	8003d8a <_printf_i+0x21e>
 8003da4:	e7eb      	b.n	8003d7e <_printf_i+0x212>
 8003da6:	2500      	movs	r5, #0
 8003da8:	f104 0619 	add.w	r6, r4, #25
 8003dac:	e7f5      	b.n	8003d9a <_printf_i+0x22e>
 8003dae:	bf00      	nop
 8003db0:	08004065 	.word	0x08004065
 8003db4:	08004076 	.word	0x08004076

08003db8 <_sbrk_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4d06      	ldr	r5, [pc, #24]	; (8003dd4 <_sbrk_r+0x1c>)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	602b      	str	r3, [r5, #0]
 8003dc4:	f7fd f8b6 	bl	8000f34 <_sbrk>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	d102      	bne.n	8003dd2 <_sbrk_r+0x1a>
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	b103      	cbz	r3, 8003dd2 <_sbrk_r+0x1a>
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	20000138 	.word	0x20000138

08003dd8 <__sread>:
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	460c      	mov	r4, r1
 8003ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de0:	f000 f8a0 	bl	8003f24 <_read_r>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	bfab      	itete	ge
 8003de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dea:	89a3      	ldrhlt	r3, [r4, #12]
 8003dec:	181b      	addge	r3, r3, r0
 8003dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003df2:	bfac      	ite	ge
 8003df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003df6:	81a3      	strhlt	r3, [r4, #12]
 8003df8:	bd10      	pop	{r4, pc}

08003dfa <__swrite>:
 8003dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dfe:	461f      	mov	r7, r3
 8003e00:	898b      	ldrh	r3, [r1, #12]
 8003e02:	05db      	lsls	r3, r3, #23
 8003e04:	4605      	mov	r5, r0
 8003e06:	460c      	mov	r4, r1
 8003e08:	4616      	mov	r6, r2
 8003e0a:	d505      	bpl.n	8003e18 <__swrite+0x1e>
 8003e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e10:	2302      	movs	r3, #2
 8003e12:	2200      	movs	r2, #0
 8003e14:	f000 f868 	bl	8003ee8 <_lseek_r>
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e22:	81a3      	strh	r3, [r4, #12]
 8003e24:	4632      	mov	r2, r6
 8003e26:	463b      	mov	r3, r7
 8003e28:	4628      	mov	r0, r5
 8003e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e2e:	f000 b817 	b.w	8003e60 <_write_r>

08003e32 <__sseek>:
 8003e32:	b510      	push	{r4, lr}
 8003e34:	460c      	mov	r4, r1
 8003e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e3a:	f000 f855 	bl	8003ee8 <_lseek_r>
 8003e3e:	1c43      	adds	r3, r0, #1
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	bf15      	itete	ne
 8003e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e4e:	81a3      	strheq	r3, [r4, #12]
 8003e50:	bf18      	it	ne
 8003e52:	81a3      	strhne	r3, [r4, #12]
 8003e54:	bd10      	pop	{r4, pc}

08003e56 <__sclose>:
 8003e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5a:	f000 b813 	b.w	8003e84 <_close_r>
	...

08003e60 <_write_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d07      	ldr	r5, [pc, #28]	; (8003e80 <_write_r+0x20>)
 8003e64:	4604      	mov	r4, r0
 8003e66:	4608      	mov	r0, r1
 8003e68:	4611      	mov	r1, r2
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	602a      	str	r2, [r5, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7fd f80f 	bl	8000e92 <_write>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_write_r+0x1e>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_write_r+0x1e>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000138 	.word	0x20000138

08003e84 <_close_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4d06      	ldr	r5, [pc, #24]	; (8003ea0 <_close_r+0x1c>)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	602b      	str	r3, [r5, #0]
 8003e90:	f7fd f81b 	bl	8000eca <_close>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_close_r+0x1a>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_close_r+0x1a>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20000138 	.word	0x20000138

08003ea4 <_fstat_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4d07      	ldr	r5, [pc, #28]	; (8003ec4 <_fstat_r+0x20>)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	4604      	mov	r4, r0
 8003eac:	4608      	mov	r0, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	f7fd f816 	bl	8000ee2 <_fstat>
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	d102      	bne.n	8003ec0 <_fstat_r+0x1c>
 8003eba:	682b      	ldr	r3, [r5, #0]
 8003ebc:	b103      	cbz	r3, 8003ec0 <_fstat_r+0x1c>
 8003ebe:	6023      	str	r3, [r4, #0]
 8003ec0:	bd38      	pop	{r3, r4, r5, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000138 	.word	0x20000138

08003ec8 <_isatty_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4d06      	ldr	r5, [pc, #24]	; (8003ee4 <_isatty_r+0x1c>)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4604      	mov	r4, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	f7fd f815 	bl	8000f02 <_isatty>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_isatty_r+0x1a>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_isatty_r+0x1a>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	20000138 	.word	0x20000138

08003ee8 <_lseek_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	4d07      	ldr	r5, [pc, #28]	; (8003f08 <_lseek_r+0x20>)
 8003eec:	4604      	mov	r4, r0
 8003eee:	4608      	mov	r0, r1
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	602a      	str	r2, [r5, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f7fd f80e 	bl	8000f18 <_lseek>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d102      	bne.n	8003f06 <_lseek_r+0x1e>
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	b103      	cbz	r3, 8003f06 <_lseek_r+0x1e>
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	20000138 	.word	0x20000138

08003f0c <__malloc_lock>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__malloc_lock+0x8>)
 8003f0e:	f7ff bb1d 	b.w	800354c <__retarget_lock_acquire_recursive>
 8003f12:	bf00      	nop
 8003f14:	2000012c 	.word	0x2000012c

08003f18 <__malloc_unlock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__malloc_unlock+0x8>)
 8003f1a:	f7ff bb18 	b.w	800354e <__retarget_lock_release_recursive>
 8003f1e:	bf00      	nop
 8003f20:	2000012c 	.word	0x2000012c

08003f24 <_read_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4d07      	ldr	r5, [pc, #28]	; (8003f44 <_read_r+0x20>)
 8003f28:	4604      	mov	r4, r0
 8003f2a:	4608      	mov	r0, r1
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	2200      	movs	r2, #0
 8003f30:	602a      	str	r2, [r5, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f7fc ff90 	bl	8000e58 <_read>
 8003f38:	1c43      	adds	r3, r0, #1
 8003f3a:	d102      	bne.n	8003f42 <_read_r+0x1e>
 8003f3c:	682b      	ldr	r3, [r5, #0]
 8003f3e:	b103      	cbz	r3, 8003f42 <_read_r+0x1e>
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	20000138 	.word	0x20000138

08003f48 <_init>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr

08003f54 <_fini>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr
